




<!DOCTYPE html>
<html class="   ">
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http://ogp.me/ns/object# article: http://ogp.me/ns/article# profile: http://ogp.me/ns/profile#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    
    
    <title>jquery.inputmask/jquery.inputmask.bundle.min.js at 3.x Â· RobinHerbots/jquery.inputmask</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png">
    <meta property="fb:app_id" content="1401488693436528">

      <meta content="@github" name="twitter:site" /><meta content="summary" name="twitter:card" /><meta content="RobinHerbots/jquery.inputmask" name="twitter:title" /><meta content="jquery.inputmask - jQuery Input Mask plugin" name="twitter:description" /><meta content="https://avatars0.githubusercontent.com/u/318447?v=2&amp;s=400" name="twitter:image:src" />
<meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="https://avatars0.githubusercontent.com/u/318447?v=2&amp;s=400" property="og:image" /><meta content="RobinHerbots/jquery.inputmask" property="og:title" /><meta content="https://github.com/RobinHerbots/jquery.inputmask" property="og:url" /><meta content="jquery.inputmask - jQuery Input Mask plugin" property="og:description" />

    <link rel="assets" href="https://assets-cdn.github.com/">
    <link rel="conduit-xhr" href="https://ghconduit.com:25035">
    <link rel="xhr-socket" href="/_sockets">

    <meta name="msapplication-TileImage" content="/windows-tile.png">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="selected-link" value="repo_source" data-pjax-transient>
      <meta name="google-analytics" content="UA-3769691-2">

    <meta content="collector.githubapp.com" name="octolytics-host" /><meta content="collector-cdn.github.com" name="octolytics-script-host" /><meta content="github" name="octolytics-app-id" /><meta content="4E8915B9:4A80:10EBE68:53E08CCB" name="octolytics-dimension-request_id" /><meta content="1290843" name="octolytics-actor-id" /><meta content="evgenoid" name="octolytics-actor-login" /><meta content="a3a05e657b15a8600de18eb6ab3b6388d7e2d4958f25f0f7726715a03d22b0ab" name="octolytics-actor-hash" />
    

    
    
    <link rel="icon" type="image/x-icon" href="https://assets-cdn.github.com/favicon.ico">


    <meta content="authenticity_token" name="csrf-param" />
<meta content="39yZ/pcb2ty2V0+gpukZ+8BUb0hge0J093ZUJtC561JaPm+7CG5w/DEES+FDRPOWROpEktxY4k5uNfE/CwUIqQ==" name="csrf-token" />

    <link href="https://assets-cdn.github.com/assets/github-4eaa9c38c91506826861597eb1685076a73795d4.css" media="all" rel="stylesheet" type="text/css" />
    <link href="https://assets-cdn.github.com/assets/github2-5b6e3d0ecbb4b0efd96b3e9123237139010d1a8e.css" media="all" rel="stylesheet" type="text/css" />
    


    <meta http-equiv="x-pjax-version" content="08a2424766b392a666bd5a99f21f7d58">

      
  <meta name="description" content="jquery.inputmask - jQuery Input Mask plugin">


  <meta content="318447" name="octolytics-dimension-user_id" /><meta content="RobinHerbots" name="octolytics-dimension-user_login" /><meta content="926231" name="octolytics-dimension-repository_id" /><meta content="RobinHerbots/jquery.inputmask" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="926231" name="octolytics-dimension-repository_network_root_id" /><meta content="RobinHerbots/jquery.inputmask" name="octolytics-dimension-repository_network_root_nwo" />

  <link href="https://github.com/RobinHerbots/jquery.inputmask/commits/3.x.atom" rel="alternate" title="Recent Commits to jquery.inputmask:3.x" type="application/atom+xml">

  </head>


  <body class="logged_in  env-production linux vis-public page-blob">
    <a href="#start-of-content" tabindex="1" class="accessibility-aid js-skip-to-content">Skip to content</a>
    <div class="wrapper">
      
      
      
      


      <div class="header header-logged-in true">
  <div class="container clearfix">

    <a class="header-logo-invertocat" href="https://github.com/" aria-label="Homepage">
  <span class="mega-octicon octicon-mark-github"></span>
</a>


    
    <a href="/notifications" aria-label="You have no unread notifications" class="notification-indicator tooltipped tooltipped-s" data-hotkey="g n">
        <span class="mail-status all-read"></span>
</a>

      <div class="command-bar js-command-bar  in-repository">
          <form accept-charset="UTF-8" action="/search" class="command-bar-form" id="top_search_form" method="get">

<div class="commandbar">
  <span class="message"></span>
  <input type="text" data-hotkey="s, /" name="q" id="js-command-bar-field" placeholder="Search or type a command" tabindex="1" autocapitalize="off"
    
    data-username="evgenoid"
    data-repo="RobinHerbots/jquery.inputmask"
  >
  <div class="display hidden"></div>
</div>

    <input type="hidden" name="nwo" value="RobinHerbots/jquery.inputmask">

    <div class="select-menu js-menu-container js-select-menu search-context-select-menu">
      <span class="minibutton select-menu-button js-menu-target" role="button" aria-haspopup="true">
        <span class="js-select-button">This repository</span>
      </span>

      <div class="select-menu-modal-holder js-menu-content js-navigation-container" aria-hidden="true">
        <div class="select-menu-modal">

          <div class="select-menu-item js-navigation-item js-this-repository-navigation-item selected">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" class="js-search-this-repository" name="search_target" value="repository" checked="checked">
            <div class="select-menu-item-text js-select-button-text">This repository</div>
          </div> <!-- /.select-menu-item -->

          <div class="select-menu-item js-navigation-item js-all-repositories-navigation-item">
            <span class="select-menu-item-icon octicon octicon-check"></span>
            <input type="radio" name="search_target" value="global">
            <div class="select-menu-item-text js-select-button-text">All repositories</div>
          </div> <!-- /.select-menu-item -->

        </div>
      </div>
    </div>

  <span class="help tooltipped tooltipped-s" aria-label="Show command bar help">
    <span class="octicon octicon-question"></span>
  </span>


  <input type="hidden" name="ref" value="cmdform">

</form>
        <ul class="top-nav">
          <li class="explore"><a href="/explore">Explore</a></li>
            <li><a href="https://gist.github.com">Gist</a></li>
            <li><a href="/blog">Blog</a></li>
          <li><a href="https://help.github.com">Help</a></li>
        </ul>
      </div>

    

<ul id="user-links">
  <li>
    <a href="/evgenoid" class="name">
      <img alt="Kula" data-user="1290843" height="20" src="https://avatars1.githubusercontent.com/u/1290843?v=2&amp;s=40" width="20" /> evgenoid
    </a>
  </li>

  <li class="new-menu dropdown-toggle js-menu-container">
    <a href="#" class="js-menu-target tooltipped tooltipped-s" aria-label="Create new...">
      <span class="octicon octicon-plus"></span>
      <span class="dropdown-arrow"></span>
    </a>

    <div class="new-menu-content js-menu-content">
    </div>
  </li>

  <li>
    <a href="/settings/profile" id="account_settings"
      class="tooltipped tooltipped-s"
      aria-label="Account settings ">
      <span class="octicon octicon-tools"></span>
    </a>
  </li>
  <li>
    <form accept-charset="UTF-8" action="/logout" class="logout-form" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="3jlCMrekk+KUQhDZy7QjFN9Vwr/VKlarrLk4IcNO8o+oBCZ0MbZKxF1bczvPjrUKskFZ9impmzz+4Gk8fxaisg==" /></div>
      <button class="sign-out-button tooltipped tooltipped-s" aria-label="Sign out">
        <span class="octicon octicon-sign-out"></span>
      </button>
</form>  </li>

</ul>

<div class="js-new-dropdown-contents hidden">
  

<ul class="dropdown-menu">
  <li>
    <a href="/new"><span class="octicon octicon-repo"></span> New repository</a>
  </li>
  <li>
    <a href="https://porter.github.com/new"><span class="octicon octicon-move-right"></span> Import repository</a>
  </li>
  <li>
    <a href="/organizations/new"><span class="octicon octicon-organization"></span> New organization</a>
  </li>


    <li class="section-title">
      <span title="RobinHerbots/jquery.inputmask">This repository</span>
    </li>
      <li>
        <a href="/RobinHerbots/jquery.inputmask/issues/new"><span class="octicon octicon-issue-opened"></span> New issue</a>
      </li>
</ul>

</div>


    
  </div>
</div>

      

        



      <div id="start-of-content" class="accessibility-aid"></div>
          <div class="site" itemscope itemtype="http://schema.org/WebPage">
    <div id="js-flash-container">
      
    </div>
    <div class="pagehead repohead instapaper_ignore readability-menu">
      <div class="container">
        
<ul class="pagehead-actions">

    <li class="subscription">
      <form accept-charset="UTF-8" action="/notifications/subscribe" class="js-social-container" data-autosubmit="true" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="TsLb9q+Gltf5u7dkXrVtZjmMNpRPSC1BEzlkU5BCXUmHSyoB6LpA9JuqfX8hA+kDUmFXSUNOcfTBe628k7x9+w==" /></div>  <input id="repository_id" name="repository_id" type="hidden" value="926231" />

    <div class="select-menu js-menu-container js-select-menu">
      <a class="social-count js-social-count" href="/RobinHerbots/jquery.inputmask/watchers">
        81
      </a>
      <a href="/RobinHerbots/jquery.inputmask/subscription"
        class="minibutton select-menu-button with-count js-menu-target" role="button" tabindex="0" aria-haspopup="true">
        <span class="js-select-button">
          <span class="octicon octicon-eye"></span>
          Watch
        </span>
      </a>

      <div class="select-menu-modal-holder">
        <div class="select-menu-modal subscription-menu-modal js-menu-content" aria-hidden="true">
          <div class="select-menu-header">
            <span class="select-menu-title">Notifications</span>
            <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
          </div> <!-- /.select-menu-header -->

          <div class="select-menu-list js-navigation-container" role="menu">

            <div class="select-menu-item js-navigation-item selected" role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input checked="checked" id="do_included" name="do" type="radio" value="included" />
                <h4>Not watching</h4>
                <span class="description">Be notified when participating or @mentioned.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-eye"></span>
                  Watch
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

            <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input id="do_subscribed" name="do" type="radio" value="subscribed" />
                <h4>Watching</h4>
                <span class="description">Be notified of all conversations.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-eye"></span>
                  Unwatch
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

            <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input id="do_ignore" name="do" type="radio" value="ignore" />
                <h4>Ignoring</h4>
                <span class="description">Never be notified.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-mute"></span>
                  Stop ignoring
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

          </div> <!-- /.select-menu-list -->

        </div> <!-- /.select-menu-modal -->
      </div> <!-- /.select-menu-modal-holder -->
    </div> <!-- /.select-menu -->

</form>
    </li>

  <li>
    

  <div class="js-toggler-container js-social-container starring-container ">

    <form accept-charset="UTF-8" action="/RobinHerbots/jquery.inputmask/unstar" class="js-toggler-form starred js-unstar-button" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="x0sFSXW1Z1WYtPzjteyns9Wh5hYOxAzlZcdBiBas0+I+0x04CAzehfBsAJKUxJswGOSLaWjDPQp7vId1MbdnXA==" /></div>
      <button
        class="minibutton with-count js-toggler-target star-button"
        aria-label="Unstar this repository" title="Unstar RobinHerbots/jquery.inputmask">
        <span class="octicon octicon-star"></span>
        Unstar
      </button>
        <a class="social-count js-social-count" href="/RobinHerbots/jquery.inputmask/stargazers">
          841
        </a>
</form>
    <form accept-charset="UTF-8" action="/RobinHerbots/jquery.inputmask/star" class="js-toggler-form unstarred js-star-button" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="authenticity_token" type="hidden" value="KtbY6BCGeQWR/R4T2cLTwndRecK3lVCQ+36qOeja6QDc1N1oA87rhW+UzYfEMjOO3K4gqUXRZiYK82Qa1QpzmQ==" /></div>
      <button
        class="minibutton with-count js-toggler-target star-button"
        aria-label="Star this repository" title="Star RobinHerbots/jquery.inputmask">
        <span class="octicon octicon-star"></span>
        Star
      </button>
        <a class="social-count js-social-count" href="/RobinHerbots/jquery.inputmask/stargazers">
          841
        </a>
</form>  </div>

  </li>


        <li>
          <a href="/RobinHerbots/jquery.inputmask/fork" class="minibutton with-count js-toggler-target fork-button lighter tooltipped-n" title="Fork your own copy of RobinHerbots/jquery.inputmask to your account" aria-label="Fork your own copy of RobinHerbots/jquery.inputmask to your account" rel="nofollow" data-method="post">
            <span class="octicon octicon-repo-forked"></span>
            Fork
          </a>
          <a href="/RobinHerbots/jquery.inputmask/network" class="social-count">337</a>
        </li>

</ul>

        <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public">
          <span class="mega-octicon octicon-repo"></span>
          <span class="author"><a href="/RobinHerbots" class="url fn" itemprop="url" rel="author"><span itemprop="title">RobinHerbots</span></a></span><!--
       --><span class="path-divider">/</span><!--
       --><strong><a href="/RobinHerbots/jquery.inputmask" class="js-current-repository js-repo-home-link">jquery.inputmask</a></strong>

          <span class="page-context-loader">
            <img alt="" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
          </span>

        </h1>
      </div><!-- /.container -->
    </div><!-- /.repohead -->

    <div class="container">
      <div class="repository-with-sidebar repo-container new-discussion-timeline  ">
        <div class="repository-sidebar clearfix">
            

<div class="sunken-menu vertical-right repo-nav js-repo-nav js-repository-container-pjax js-octicon-loaders" data-issue-count-url="/RobinHerbots/jquery.inputmask/issues/counts">
  <div class="sunken-menu-contents">
    <ul class="sunken-menu-group">
      <li class="tooltipped tooltipped-w" aria-label="Code">
        <a href="/RobinHerbots/jquery.inputmask" aria-label="Code" class="selected js-selected-navigation-item sunken-menu-item" data-hotkey="g c" data-pjax="true" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches /RobinHerbots/jquery.inputmask">
          <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

        <li class="tooltipped tooltipped-w" aria-label="Issues">
          <a href="/RobinHerbots/jquery.inputmask/issues" aria-label="Issues" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g i" data-selected-links="repo_issues repo_labels repo_milestones /RobinHerbots/jquery.inputmask/issues">
            <span class="octicon octicon-issue-opened"></span> <span class="full-word">Issues</span>
            <span class="js-issue-replace-counter"></span>
            <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>

      <li class="tooltipped tooltipped-w" aria-label="Pull Requests">
        <a href="/RobinHerbots/jquery.inputmask/pulls" aria-label="Pull Requests" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g p" data-selected-links="repo_pulls /RobinHerbots/jquery.inputmask/pulls">
            <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull Requests</span>
            <span class="js-pull-replace-counter"></span>
            <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>


        <li class="tooltipped tooltipped-w" aria-label="Wiki">
          <a href="/RobinHerbots/jquery.inputmask/wiki" aria-label="Wiki" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g w" data-selected-links="repo_wiki /RobinHerbots/jquery.inputmask/wiki">
            <span class="octicon octicon-book"></span> <span class="full-word">Wiki</span>
            <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>
    </ul>
    <div class="sunken-menu-separator"></div>
    <ul class="sunken-menu-group">

      <li class="tooltipped tooltipped-w" aria-label="Pulse">
        <a href="/RobinHerbots/jquery.inputmask/pulse" aria-label="Pulse" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="pulse /RobinHerbots/jquery.inputmask/pulse">
          <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped tooltipped-w" aria-label="Graphs">
        <a href="/RobinHerbots/jquery.inputmask/graphs" aria-label="Graphs" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="repo_graphs repo_contributors /RobinHerbots/jquery.inputmask/graphs">
          <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>
    </ul>


  </div>
</div>

              <div class="only-with-full-nav">
                

  

<div class="clone-url "
  data-protocol-type="http"
  data-url="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone">
  <h3><strong>HTTPS</strong> clone URL</h3>
  <div class="input-group">
    <input type="text" class="input-mini input-monospace js-url-field"
           value="https://github.com/RobinHerbots/jquery.inputmask.git" readonly="readonly">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="https://github.com/RobinHerbots/jquery.inputmask.git" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  

<div class="clone-url open"
  data-protocol-type="ssh"
  data-url="/users/set_protocol?protocol_selector=ssh&amp;protocol_type=clone">
  <h3><strong>SSH</strong> clone URL</h3>
  <div class="input-group">
    <input type="text" class="input-mini input-monospace js-url-field"
           value="git@github.com:RobinHerbots/jquery.inputmask.git" readonly="readonly">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="git@github.com:RobinHerbots/jquery.inputmask.git" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  

<div class="clone-url "
  data-protocol-type="subversion"
  data-url="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone">
  <h3><strong>Subversion</strong> checkout URL</h3>
  <div class="input-group">
    <input type="text" class="input-mini input-monospace js-url-field"
           value="https://github.com/RobinHerbots/jquery.inputmask" readonly="readonly">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="https://github.com/RobinHerbots/jquery.inputmask" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>


<p class="clone-options">You can clone with
      <a href="#" class="js-clone-selector" data-protocol="http">HTTPS</a>,
      <a href="#" class="js-clone-selector" data-protocol="ssh">SSH</a>,
      or <a href="#" class="js-clone-selector" data-protocol="subversion">Subversion</a>.
  <a href="https://help.github.com/articles/which-remote-url-should-i-use" class="help tooltipped tooltipped-n" aria-label="Get help on which URL is right for you.">
    <span class="octicon octicon-question"></span>
  </a>
</p>



                <a href="/RobinHerbots/jquery.inputmask/archive/3.x.zip"
                   class="minibutton sidebar-button"
                   aria-label="Download RobinHerbots/jquery.inputmask as a zip file"
                   title="Download RobinHerbots/jquery.inputmask as a zip file"
                   rel="nofollow">
                  <span class="octicon octicon-cloud-download"></span>
                  Download ZIP
                </a>
              </div>
        </div><!-- /.repository-sidebar -->

        <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>
          


<a href="/RobinHerbots/jquery.inputmask/blob/920e4c201fefbf453d63a80e3cfa8ced40ff5df2/dist/jquery.inputmask.bundle.min.js" class="hidden js-permalink-shortcut" data-hotkey="y">Permalink</a>

<!-- blob contrib key: blob_contributors:v21:7feffd7175da1765d5a26f271a70c7da -->

<div class="file-navigation">
  

<div class="select-menu js-menu-container js-select-menu" >
  <span class="minibutton select-menu-button js-menu-target css-truncate" data-hotkey="w"
    data-master-branch="3.x"
    data-ref="3.x"
    title="3.x"
    role="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
    <span class="octicon octicon-git-branch"></span>
    <i>branch:</i>
    <span class="js-select-button css-truncate-target">3.x</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax aria-hidden="true">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
      </div> <!-- /.select-menu-header -->

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" class="js-select-menu-tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" class="js-select-menu-tab">Tags</a>
            </li>
          </ul>
        </div><!-- /.select-menu-tabs -->
      </div><!-- /.select-menu-filters -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/blob/1.x/dist/jquery.inputmask.bundle.min.js"
                 data-name="1.x"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="1.x">1.x</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/blob/2.x/dist/jquery.inputmask.bundle.min.js"
                 data-name="2.x"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="2.x">2.x</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item selected">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/blob/3.x/dist/jquery.inputmask.bundle.min.js"
                 data-name="3.x"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.x">3.x</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/blob/gh-pages/dist/jquery.inputmask.bundle.min.js"
                 data-name="gh-pages"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="gh-pages">gh-pages</a>
            </div> <!-- /.select-menu-item -->
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/tree/3.0.55/dist/jquery.inputmask.bundle.min.js"
                 data-name="3.0.55"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.0.55">3.0.55</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/tree/3.0.52/dist/jquery.inputmask.bundle.min.js"
                 data-name="3.0.52"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.0.52">3.0.52</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/tree/3.0.0/dist/jquery.inputmask.bundle.min.js"
                 data-name="3.0.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="3.0.0">3.0.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/tree/2.5.9/dist/jquery.inputmask.bundle.min.js"
                 data-name="2.5.9"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="2.5.9">2.5.9</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/tree/2.5.0/dist/jquery.inputmask.bundle.min.js"
                 data-name="2.5.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="2.5.0">2.5.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/tree/2.4.18/dist/jquery.inputmask.bundle.min.js"
                 data-name="2.4.18"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="2.4.18">2.4.18</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/tree/2.4.0/dist/jquery.inputmask.bundle.min.js"
                 data-name="2.4.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="2.4.0">2.4.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/tree/2.3.0/dist/jquery.inputmask.bundle.min.js"
                 data-name="2.3.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="2.3.0">2.3.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/tree/2.2.39/dist/jquery.inputmask.bundle.min.js"
                 data-name="2.2.39"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="2.2.39">2.2.39</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/tree/2.2.0/dist/jquery.inputmask.bundle.min.js"
                 data-name="2.2.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="2.2.0">2.2.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/tree/2.1.3/dist/jquery.inputmask.bundle.min.js"
                 data-name="2.1.3"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="2.1.3">2.1.3</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/tree/1.2.2/dist/jquery.inputmask.bundle.min.js"
                 data-name="1.2.2"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="1.2.2">1.2.2</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/tree/1.2.0/dist/jquery.inputmask.bundle.min.js"
                 data-name="1.2.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="1.2.0">1.2.0</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/RobinHerbots/jquery.inputmask/tree/1.0.0/dist/jquery.inputmask.bundle.min.js"
                 data-name="1.0.0"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="1.0.0">1.0.0</a>
            </div> <!-- /.select-menu-item -->
        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

    </div> <!-- /.select-menu-modal -->
  </div> <!-- /.select-menu-modal-holder -->
</div> <!-- /.select-menu -->

  <div class="button-group right">
    <a href="/RobinHerbots/jquery.inputmask/find/3.x"
          class="js-show-file-finder minibutton empty-icon tooltipped tooltipped-s"
          data-pjax
          data-hotkey="t"
          aria-label="Quickly jump between files">
      <span class="octicon octicon-list-unordered"></span>
    </a>
    <button class="js-zeroclipboard minibutton zeroclipboard-button"
          data-clipboard-text="dist/jquery.inputmask.bundle.min.js"
          aria-label="Copy to clipboard"
          data-copied-hint="Copied!">
      <span class="octicon octicon-clippy"></span>
    </button>
  </div>

  <div class="breadcrumb">
    <span class='repo-root js-repo-root'><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/RobinHerbots/jquery.inputmask" data-branch="3.x" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">jquery.inputmask</span></a></span></span><span class="separator"> / </span><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/RobinHerbots/jquery.inputmask/tree/3.x/dist" data-branch="3.x" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">dist</span></a></span><span class="separator"> / </span><strong class="final-path">jquery.inputmask.bundle.min.js</strong>
  </div>
</div>


  <div class="commit file-history-tease">
      <img alt="Robin Herbots" class="main-avatar" data-user="318447" height="24" src="https://avatars3.githubusercontent.com/u/318447?v=1&amp;s=48" width="24" />
      <span class="author"><a href="/RobinHerbots" rel="author">RobinHerbots</a></span>
      <time datetime="2014-08-04T14:02:19+02:00" is="relative-time">August 04, 2014</time>
      <div class="commit-title">
          <a href="/RobinHerbots/jquery.inputmask/commit/920e4c201fefbf453d63a80e3cfa8ced40ff5df2" class="message" data-pjax="true" title="amd support">amd support</a>
      </div>

    <div class="participation">
      <p class="quickstat"><a href="#blob_contributors_box" rel="facebox"><strong>1</strong>  contributor</a></p>
      
    </div>
    <div id="blob_contributors_box" style="display:none">
      <h2 class="facebox-header">Users who have contributed to this file</h2>
      <ul class="facebox-user-list">
          <li class="facebox-user-list-item">
            <img alt="Robin Herbots" data-user="318447" height="24" src="https://avatars3.githubusercontent.com/u/318447?v=1&amp;s=48" width="24" />
            <a href="/RobinHerbots">RobinHerbots</a>
          </li>
      </ul>
    </div>
  </div>

<div class="file-box">
  <div class="file">
    <div class="meta clearfix">
      <div class="info file-name">
          <span>116 lines (115 sloc)</span>
          <span class="meta-divider"></span>
        <span>51.86 kb</span>
      </div>
      <div class="actions">
        <div class="button-group">
          <a href="/RobinHerbots/jquery.inputmask/raw/3.x/dist/jquery.inputmask.bundle.min.js" class="minibutton " id="raw-url">Raw</a>
            <a href="/RobinHerbots/jquery.inputmask/blame/3.x/dist/jquery.inputmask.bundle.min.js" class="minibutton js-update-url-with-hash">Blame</a>
          <a href="/RobinHerbots/jquery.inputmask/commits/3.x/dist/jquery.inputmask.bundle.min.js" class="minibutton " rel="nofollow">History</a>
        </div><!-- /.button-group -->


              <a class="octicon-button tooltipped tooltipped-n js-update-url-with-hash"
                 aria-label="Clicking this button will fork this project so you can edit the file"
                 href="/RobinHerbots/jquery.inputmask/edit/3.x/dist/jquery.inputmask.bundle.min.js"
                 data-method="post" rel="nofollow"><span class="octicon octicon-pencil"></span></a>

            <a class="octicon-button danger tooltipped tooltipped-s"
               href="/RobinHerbots/jquery.inputmask/delete/3.x/dist/jquery.inputmask.bundle.min.js"
               aria-label="Fork this project and delete file"
               data-method="post" data-test-id="delete-blob-file" rel="nofollow">
          <span class="octicon octicon-trashcan"></span>
        </a>
      </div><!-- /.actions -->
    </div>
      
  <div class="blob-wrapper data type-javascript">
       <table class="file-code file-diff tab-size-8">
         <tr class="file-code-line">
           <td class="blob-line-nums">
             <span id="L1" rel="#L1">1</span>
<span id="L2" rel="#L2">2</span>
<span id="L3" rel="#L3">3</span>
<span id="L4" rel="#L4">4</span>
<span id="L5" rel="#L5">5</span>
<span id="L6" rel="#L6">6</span>
<span id="L7" rel="#L7">7</span>
<span id="L8" rel="#L8">8</span>
<span id="L9" rel="#L9">9</span>
<span id="L10" rel="#L10">10</span>
<span id="L11" rel="#L11">11</span>
<span id="L12" rel="#L12">12</span>
<span id="L13" rel="#L13">13</span>
<span id="L14" rel="#L14">14</span>
<span id="L15" rel="#L15">15</span>
<span id="L16" rel="#L16">16</span>
<span id="L17" rel="#L17">17</span>
<span id="L18" rel="#L18">18</span>
<span id="L19" rel="#L19">19</span>
<span id="L20" rel="#L20">20</span>
<span id="L21" rel="#L21">21</span>
<span id="L22" rel="#L22">22</span>
<span id="L23" rel="#L23">23</span>
<span id="L24" rel="#L24">24</span>
<span id="L25" rel="#L25">25</span>
<span id="L26" rel="#L26">26</span>
<span id="L27" rel="#L27">27</span>
<span id="L28" rel="#L28">28</span>
<span id="L29" rel="#L29">29</span>
<span id="L30" rel="#L30">30</span>
<span id="L31" rel="#L31">31</span>
<span id="L32" rel="#L32">32</span>
<span id="L33" rel="#L33">33</span>
<span id="L34" rel="#L34">34</span>
<span id="L35" rel="#L35">35</span>
<span id="L36" rel="#L36">36</span>
<span id="L37" rel="#L37">37</span>
<span id="L38" rel="#L38">38</span>
<span id="L39" rel="#L39">39</span>
<span id="L40" rel="#L40">40</span>
<span id="L41" rel="#L41">41</span>
<span id="L42" rel="#L42">42</span>
<span id="L43" rel="#L43">43</span>
<span id="L44" rel="#L44">44</span>
<span id="L45" rel="#L45">45</span>
<span id="L46" rel="#L46">46</span>
<span id="L47" rel="#L47">47</span>
<span id="L48" rel="#L48">48</span>
<span id="L49" rel="#L49">49</span>
<span id="L50" rel="#L50">50</span>
<span id="L51" rel="#L51">51</span>
<span id="L52" rel="#L52">52</span>
<span id="L53" rel="#L53">53</span>
<span id="L54" rel="#L54">54</span>
<span id="L55" rel="#L55">55</span>
<span id="L56" rel="#L56">56</span>
<span id="L57" rel="#L57">57</span>
<span id="L58" rel="#L58">58</span>
<span id="L59" rel="#L59">59</span>
<span id="L60" rel="#L60">60</span>
<span id="L61" rel="#L61">61</span>
<span id="L62" rel="#L62">62</span>
<span id="L63" rel="#L63">63</span>
<span id="L64" rel="#L64">64</span>
<span id="L65" rel="#L65">65</span>
<span id="L66" rel="#L66">66</span>
<span id="L67" rel="#L67">67</span>
<span id="L68" rel="#L68">68</span>
<span id="L69" rel="#L69">69</span>
<span id="L70" rel="#L70">70</span>
<span id="L71" rel="#L71">71</span>
<span id="L72" rel="#L72">72</span>
<span id="L73" rel="#L73">73</span>
<span id="L74" rel="#L74">74</span>
<span id="L75" rel="#L75">75</span>
<span id="L76" rel="#L76">76</span>
<span id="L77" rel="#L77">77</span>
<span id="L78" rel="#L78">78</span>
<span id="L79" rel="#L79">79</span>
<span id="L80" rel="#L80">80</span>
<span id="L81" rel="#L81">81</span>
<span id="L82" rel="#L82">82</span>
<span id="L83" rel="#L83">83</span>
<span id="L84" rel="#L84">84</span>
<span id="L85" rel="#L85">85</span>
<span id="L86" rel="#L86">86</span>
<span id="L87" rel="#L87">87</span>
<span id="L88" rel="#L88">88</span>
<span id="L89" rel="#L89">89</span>
<span id="L90" rel="#L90">90</span>
<span id="L91" rel="#L91">91</span>
<span id="L92" rel="#L92">92</span>
<span id="L93" rel="#L93">93</span>
<span id="L94" rel="#L94">94</span>
<span id="L95" rel="#L95">95</span>
<span id="L96" rel="#L96">96</span>
<span id="L97" rel="#L97">97</span>
<span id="L98" rel="#L98">98</span>
<span id="L99" rel="#L99">99</span>
<span id="L100" rel="#L100">100</span>
<span id="L101" rel="#L101">101</span>
<span id="L102" rel="#L102">102</span>
<span id="L103" rel="#L103">103</span>
<span id="L104" rel="#L104">104</span>
<span id="L105" rel="#L105">105</span>
<span id="L106" rel="#L106">106</span>
<span id="L107" rel="#L107">107</span>
<span id="L108" rel="#L108">108</span>
<span id="L109" rel="#L109">109</span>
<span id="L110" rel="#L110">110</span>
<span id="L111" rel="#L111">111</span>
<span id="L112" rel="#L112">112</span>
<span id="L113" rel="#L113">113</span>
<span id="L114" rel="#L114">114</span>
<span id="L115" rel="#L115">115</span>

           </td>
           <td class="blob-line-code"><div class="code-body highlight"><pre><div class='line' id='LC1'><span class="cm">/*</span></div><div class='line' id='LC2'><span class="cm"> Input Mask plugin for jquery</span></div><div class='line' id='LC3'><span class="cm"> http://github.com/RobinHerbots/jquery.inputmask</span></div><div class='line' id='LC4'><span class="cm"> Copyright (c) 2010 - 2014 Robin Herbots</span></div><div class='line' id='LC5'><span class="cm"> Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)</span></div><div class='line' id='LC6'><span class="cm"> Version: 3.0.59</span></div><div class='line' id='LC7'><span class="cm"> Input Mask plugin for jquery</span></div><div class='line' id='LC8'><span class="cm"> http://github.com/RobinHerbots/jquery.inputmask</span></div><div class='line' id='LC9'><span class="cm"> Copyright (c) 2010 - 2014 Robin Herbots</span></div><div class='line' id='LC10'><span class="cm"> Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)</span></div><div class='line' id='LC11'><span class="cm"> Version: 3.0.59</span></div><div class='line' id='LC12'><span class="cm">*/</span></div><div class='line' id='LC13'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;jquery.inputmask&quot;</span><span class="p">,[</span><span class="s2">&quot;jquery&quot;</span><span class="p">],</span><span class="nx">f</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">)})(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="s2">&quot;on&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span> <span class="k">in</span> <span class="nx">f</span><span class="p">;</span><span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;return;&quot;</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">]);</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">b</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">w</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">aliases</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">alias</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">alias</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">w</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">w</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">w</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">:!</span><span class="mi">1</span><span class="p">},</span><span class="nx">e</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">w</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">w</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matches</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">isGroup</span><span class="o">=</span><span class="nx">a</span><span class="o">||!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">isOptional</span><span class="o">=</span></div><div class='line' id='LC14'><span class="nx">f</span><span class="o">||!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">isQuantifier</span><span class="o">=</span><span class="nx">m</span><span class="o">||!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">isAlternator</span><span class="o">=</span><span class="nx">w</span><span class="o">||!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">quantifier</span><span class="o">=</span><span class="p">{</span><span class="nx">min</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">max</span><span class="o">:</span><span class="mi">1</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">w</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">m</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">definitions</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="o">==</span><span class="nx">f</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">m</span><span class="o">?</span><span class="nx">m</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;&amp;!</span><span class="nx">d</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">prevalidator</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">h</span><span class="o">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">cardinality</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">k</span><span class="o">&gt;=</span><span class="nx">g</span><span class="o">?</span><span class="nx">h</span><span class="p">[</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span><span class="p">[],</span><span class="nx">p</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">validator</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">cardinality</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">m</span><span class="o">++</span><span class="p">,</span><span class="mi">0</span><span class="p">,{</span><span class="nx">fn</span><span class="o">:</span><span class="nx">p</span><span class="o">?</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">p</span><span class="o">?</span><span class="nb">RegExp</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">test</span><span class="o">=</span><span class="nx">p</span><span class="p">}</span><span class="o">:</span><span class="sr">/./</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="nx">n</span><span class="o">?</span><span class="nx">n</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">optionality</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">isOptional</span><span class="p">,</span><span class="nx">newBlockMarker</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">casing</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">casing</span><span class="p">,</span><span class="nx">def</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">definitionSymbol</span><span class="o">||</span><span class="nx">b</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">,</span></div><div class='line' id='LC15'><span class="nx">mask</span><span class="o">:</span><span class="nx">b</span><span class="p">})}</span><span class="nx">f</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">m</span><span class="o">++</span><span class="p">,</span><span class="mi">0</span><span class="p">,{</span><span class="nx">fn</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">validator</span><span class="o">?</span><span class="s2">&quot;string&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">e</span><span class="p">.</span><span class="nx">validator</span><span class="o">?</span><span class="nb">RegExp</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">validator</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">test</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">validator</span><span class="p">}</span><span class="o">:</span><span class="sr">/./</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">cardinality</span><span class="p">,</span><span class="nx">optionality</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">isOptional</span><span class="p">,</span><span class="nx">newBlockMarker</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">casing</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">casing</span><span class="p">,</span><span class="nx">def</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">definitionSymbol</span><span class="o">||</span><span class="nx">b</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">,</span><span class="nx">mask</span><span class="o">:</span><span class="nx">b</span><span class="p">})}</span><span class="k">else</span> <span class="nx">f</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">m</span><span class="o">++</span><span class="p">,</span><span class="mi">0</span><span class="p">,{</span><span class="nx">fn</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">optionality</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">isOptional</span><span class="p">,</span><span class="nx">newBlockMarker</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">casing</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">def</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">mask</span><span class="o">:</span><span class="nx">b</span><span class="p">}),</span><span class="nx">d</span><span class="o">=!</span><span class="mi">1</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="sr">/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})\??|[^.?*+^${[]()|\\]+|./g</span><span class="p">,</span></div><div class='line' id='LC16'><span class="nx">d</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">b</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="p">[],</span><span class="nx">v</span><span class="o">=</span><span class="p">[];</span><span class="nx">m</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">f</span><span class="p">);)</span><span class="k">switch</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">m</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)){</span><span class="k">case</span> <span class="nx">a</span><span class="p">.</span><span class="nx">optionalmarker</span><span class="p">.</span><span class="nx">end</span><span class="o">:</span><span class="k">case</span> <span class="nx">a</span><span class="p">.</span><span class="nx">groupmarker</span><span class="p">.</span><span class="nx">end</span><span class="o">:</span><span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">k</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">a</span><span class="p">.</span><span class="nx">optionalmarker</span><span class="p">.</span><span class="nx">start</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">b</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">));</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">a</span><span class="p">.</span><span class="nx">groupmarker</span><span class="p">.</span><span class="nx">start</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">b</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">));</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">a</span><span class="p">.</span><span class="nx">quantifiermarker</span><span class="p">.</span><span class="nx">start</span><span class="o">:</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">b</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[{}]/g</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">?</span><span class="nx">q</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="nx">q</span><span class="o">=</span><span class="mi">1</span><span class="o">==</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">m</span><span class="o">:</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">?</span><span class="nx">q</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="o">==</span><span class="nx">q</span><span class="o">||</span><span class="s2">&quot;+&quot;</span><span class="o">==</span><span class="nx">q</span><span class="p">)</span><span class="nx">m</span><span class="o">=</span><span class="s2">&quot;*&quot;</span><span class="o">==</span><span class="nx">q</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span></div><div class='line' id='LC17'><span class="nx">g</span><span class="p">.</span><span class="nx">quantifier</span><span class="o">=</span><span class="p">{</span><span class="nx">min</span><span class="o">:</span><span class="nx">m</span><span class="p">,</span><span class="nx">max</span><span class="o">:</span><span class="nx">q</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="nx">q</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">matches</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">m</span><span class="p">.</span><span class="nx">isGroup</span><span class="p">){</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="k">new</span> <span class="nx">b</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">u</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nx">u</span><span class="p">}</span><span class="nx">q</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span><span class="nx">q</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">)}</span><span class="k">else</span> <span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">pop</span><span class="p">(),</span><span class="nx">m</span><span class="p">.</span><span class="nx">isGroup</span><span class="o">||</span><span class="p">(</span><span class="nx">u</span><span class="o">=</span><span class="k">new</span> <span class="nx">b</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="nx">u</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="nx">u</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">a</span><span class="p">.</span><span class="nx">escapeChar</span><span class="o">:</span><span class="nx">d</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">a</span><span class="p">.</span><span class="nx">alternatormarker</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">b</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="p">(</span><span class="nx">q</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">matches</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">pop</span><span class="p">(),</span><span class="nx">g</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">),</span><span class="nx">q</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">pop</span><span class="p">(),</span><span class="nx">g</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">));</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="p">(</span><span class="nx">k</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span></div><div class='line' id='LC18'><span class="mi">1</span><span class="p">],</span><span class="nx">m</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">m</span><span class="p">.</span><span class="nx">isAlternator</span><span class="p">){</span><span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">m</span><span class="p">.</span><span class="nx">matches</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">isGroup</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">k</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">)}}</span><span class="k">else</span> <span class="mi">0</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">matches</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">g</span><span class="p">.</span><span class="nx">isGroup</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">isGroup</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">w</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">groupmarker</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">w</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">groupmarker</span><span class="p">.</span><span class="nx">end</span><span class="p">))),</span><span class="nx">w</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">m</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="nx">m</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">isAlternator</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">m</span><span class="p">.</span><span class="nx">matches</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">isGroup</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">matches</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">k</span><span class="p">)}</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">matches</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">g</span><span class="p">.</span><span class="nx">isGroup</span><span class="o">&amp;&amp;</span></div><div class='line' id='LC19'><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">isGroup</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">w</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">groupmarker</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">w</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">groupmarker</span><span class="p">.</span><span class="nx">end</span><span class="p">)),</span><span class="nx">v</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">));</span><span class="k">return</span> <span class="nx">v</span><span class="p">}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">m</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">numericInput</span><span class="o">&amp;&amp;!</span><span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">multi</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">reverse</span><span class="p">();</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">optionalmarker</span><span class="p">.</span><span class="nx">start</span><span class="o">?</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">optionalmarker</span><span class="p">.</span><span class="nx">end</span><span class="o">:</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">optionalmarker</span><span class="p">.</span><span class="nx">end</span><span class="o">?</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">optionalmarker</span><span class="p">.</span><span class="nx">start</span><span class="o">:</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">groupmarker</span><span class="p">.</span><span class="nx">start</span><span class="o">?</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">groupmarker</span><span class="p">.</span><span class="nx">end</span><span class="o">:</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">groupmarker</span><span class="p">.</span><span class="nx">end</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">groupmarker</span><span class="p">.</span><span class="nx">start</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="s2">&quot;&quot;</span><span class="o">!=</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="o">||</span><span class="s2">&quot;*&quot;</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="o">||</span><span class="s2">&quot;+&quot;</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">groupmarker</span><span class="p">.</span><span class="nx">start</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">groupmarker</span><span class="p">.</span><span class="nx">end</span><span class="o">+</span></div><div class='line' id='LC20'><span class="nx">a</span><span class="p">.</span><span class="nx">quantifiermarker</span><span class="p">.</span><span class="nx">start</span><span class="o">+</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="s2">&quot;+&quot;</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">quantifiermarker</span><span class="p">.</span><span class="nx">end</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">masksCache</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">masksCache</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">maskToken</span><span class="o">:</span><span class="nx">w</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">validPositions</span><span class="o">:</span><span class="p">{},</span><span class="nx">_buffer</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">buffer</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">tests</span><span class="o">:</span><span class="p">{},</span><span class="nx">metadata</span><span class="o">:</span><span class="nx">m</span><span class="p">});</span><span class="k">return</span> <span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,{},</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">masksCache</span><span class="p">[</span><span class="nx">b</span><span class="p">])}}</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="nx">f</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">mask</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">mask</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">mask</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="nx">f</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">mask</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">b</span><span class="p">.</span><span class="nx">mask</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span><span class="nx">b</span><span class="p">))</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">toString</span><span class="p">()))});</span><span class="k">else</span> <span class="kd">var</span> <span class="nx">c</span><span class="o">=</span></div><div class='line' id='LC21'><span class="s2">&quot;(&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;)|(&quot;</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">else</span> <span class="mi">1</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;!</span><span class="mi">1</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">greedy</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">!=</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">placeholder</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">a</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">mask</span><span class="o">?</span><span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span><span class="nx">a</span><span class="p">.</span><span class="nx">mask</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="nx">d</span><span class="o">=</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">ScriptEngineMajorVersion</span><span class="o">?</span><span class="nx">ScriptEngineMajorVersion</span><span class="p">()</span><span class="o">:</span><span class="mi">10</span><span class="o">&lt;=</span><span class="p">(</span><span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s2">&quot;/*@cc_on return @_jscript_version; @*/&quot;</span><span class="p">))(),</span><span class="nx">c</span><span class="o">=</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/iphone/i</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/android.*safari.*/i</span><span class="p">),</span><span class="nx">y</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/android.*chrome.*/i</span><span class="p">),</span><span class="nx">u</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/android.*firefox.*/i</span><span class="p">),</span><span class="nx">L</span><span class="o">=</span><span class="sr">/Kindle/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span></div><div class='line' id='LC22'><span class="sr">/Silk/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span><span class="sr">/KFTT/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span><span class="sr">/KFOT/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span><span class="sr">/KFJWA/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span><span class="sr">/KFJWI/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span><span class="sr">/KFSOWI/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span><span class="sr">/KFTHWA/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span><span class="sr">/KFTHWI/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span><span class="sr">/KFAPWA/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span><span class="sr">/KFAPWI/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">M</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;paste&quot;</span><span class="p">)</span><span class="o">?</span><span class="s2">&quot;paste&quot;</span><span class="o">:</span><span class="nx">a</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">)</span><span class="o">?</span><span class="s2">&quot;input&quot;</span><span class="o">:</span><span class="s2">&quot;propertychange&quot;</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Y</span><span class="o">=</span><span class="p">[],</span><span class="nx">k</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="p">;</span><span class="k">do</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">h</span><span class="p">]){</span><span class="kd">var</span> <span class="nx">D</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">h</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">match</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">locator</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span><span class="nx">Y</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">fn</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">def</span><span class="o">:!</span><span class="mi">0</span><span class="o">===</span><span class="nx">d</span><span class="o">?</span><span class="nx">D</span><span class="p">.</span><span class="nx">input</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">placeholder</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="o">%</span><span class="nx">e</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">.</span><span class="nx">length</span><span class="p">))}</span><span class="k">else</span> <span class="nx">k</span><span class="o">=</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">h</span><span class="o">?</span><span class="nx">P</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span></div><div class='line' id='LC23'><span class="nx">k</span><span class="p">,</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="nx">p</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">match</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">locator</span><span class="p">.</span><span class="nx">slice</span><span class="p">(),</span><span class="nx">Y</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">fn</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">def</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">placeholder</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="o">%</span><span class="nx">e</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">.</span><span class="nx">length</span><span class="p">));</span><span class="nx">h</span><span class="o">++</span><span class="p">}</span><span class="k">while</span><span class="p">((</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">N</span><span class="o">||</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">N</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!=</span><span class="nx">g</span><span class="p">.</span><span class="nx">fn</span><span class="o">||</span><span class="kc">null</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">fn</span><span class="o">&amp;&amp;</span><span class="s2">&quot;&quot;</span><span class="o">!=</span><span class="nx">g</span><span class="p">.</span><span class="nx">def</span><span class="o">||</span><span class="nx">f</span><span class="o">&gt;=</span><span class="nx">h</span><span class="p">);</span><span class="nx">Y</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span><span class="k">return</span> <span class="nx">Y</span><span class="p">}</span><span class="kd">function</span> <span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">tests</span><span class="o">=</span><span class="p">{};</span><span class="o">!</span><span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">_buffer</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">validPositions</span><span class="o">=</span><span class="p">{},</span><span class="nx">e</span><span class="p">.</span><span class="nx">p</span><span class="o">=-</span><span class="mi">1</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">C</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=-</span><span class="mi">1</span><span class="p">);</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span> <span class="k">in</span> <span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">==</span><span class="nx">a</span><span class="o">||</span><span class="kc">null</span><span class="o">!=</span><span class="nx">f</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">match</span><span class="p">.</span><span class="nx">fn</span><span class="p">)</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">),</span><span class="nx">h</span><span class="o">&gt;=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">)}</span><span class="k">return</span> <span class="mi">1</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">-</span><span class="nx">c</span><span class="o">||</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span></div><div class='line' id='LC24'><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,{},</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">);</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">C</span><span class="p">(),</span><span class="nx">k</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;=</span><span class="nx">h</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">)</span><span class="k">delete</span> <span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;=</span><span class="nx">h</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">fn</span><span class="o">?</span><span class="nx">k</span><span class="o">+</span><span class="mi">1</span><span class="o">:</span><span class="nx">E</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">F</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">def</span><span class="p">)</span><span class="o">?</span><span class="nx">c</span><span class="o">&amp;&amp;!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">T</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">input</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">:!</span><span class="mi">1</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">)</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,{},</span><span class="nx">d</span><span class="p">),</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span> <span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="k">delete</span> <span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;=</span><span class="nx">C</span><span class="p">();){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span></div><div class='line' id='LC25'><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">k</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">k</span><span class="o">?</span><span class="p">(</span><span class="nx">F</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">def</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">T</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">input</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">delete</span> <span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">f</span><span class="o">++</span><span class="p">),</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="o">++</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">C</span><span class="p">();</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">||</span><span class="kc">null</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">match</span><span class="p">.</span><span class="nx">fn</span><span class="p">);)</span><span class="k">delete</span> <span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">f</span><span class="o">--</span><span class="p">;</span><span class="nx">q</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">P</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="kd">var</span> <span class="nx">c</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">greedy</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">match</span><span class="o">||!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">optionality</span><span class="o">&amp;&amp;!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">newBlockMarker</span><span class="o">||!</span><span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">optionalQuantifier</span><span class="p">));</span><span class="nx">b</span><span class="o">++</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="kd">function</span> <span class="nx">B</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">match</span><span class="o">:</span></div><div class='line' id='LC26'><span class="nx">P</span><span class="p">(</span><span class="nx">a</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">match</span><span class="p">}</span><span class="kd">function</span> <span class="nx">F</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">P</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">match</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">match</span><span class="p">.</span><span class="nx">def</span><span class="o">==</span><span class="nx">b</span><span class="p">){</span><span class="nx">e</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">}</span><span class="kd">function</span> <span class="nx">P</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">function</span> <span class="nx">k</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">s</span><span class="p">){</span><span class="kd">function</span> <span class="nx">m</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">matches</span><span class="p">)</span><span class="k">return</span> <span class="nx">l</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">match</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">locator</span><span class="o">:</span><span class="nx">s</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()}),</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">d</span><span class="p">.</span><span class="nx">matches</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">isGroup</span><span class="o">&amp;&amp;!</span><span class="mi">0</span><span class="o">!==</span><span class="nx">h</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">m</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matches</span><span class="p">[</span><span class="nx">J</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">s</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">isOptional</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">k</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">h</span><span class="p">))</span><span class="nx">d</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">match</span><span class="p">,(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="o">==</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">matches</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">D</span><span class="o">=!</span><span class="mi">0</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">isAlternator</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">slice</span><span class="p">(),</span><span class="nx">p</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span></div><div class='line' id='LC27'><span class="nx">c</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span><span class="o">:-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">==</span><span class="nx">p</span><span class="p">){</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="p">[];</span><span class="nx">k</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">matches</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">c</span><span class="p">.</span><span class="nx">slice</span><span class="p">(),[</span><span class="mi">0</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">s</span><span class="p">),</span><span class="nx">h</span><span class="p">);</span><span class="nx">p</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span><span class="nx">g</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="p">[];</span><span class="nx">d</span><span class="o">=</span><span class="nx">k</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">matches</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">c</span><span class="p">,[</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">s</span><span class="p">),</span><span class="nx">h</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span><span class="nx">l</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="nx">q</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">h</span><span class="p">];</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">q</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">Z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">Z</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">Z</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">mask</span><span class="o">==</span><span class="nx">s</span><span class="p">[</span><span class="nx">Z</span><span class="p">].</span><span class="nx">match</span><span class="p">.</span><span class="nx">mask</span><span class="p">){</span><span class="nx">s</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">Z</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">q</span><span class="p">.</span><span class="nx">locator</span><span class="p">[</span><span class="nx">B</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">}}</span><span class="nx">l</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">s</span><span class="p">)}</span><span class="k">else</span> <span class="nx">d</span><span class="o">=</span><span class="nx">m</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">matches</span><span class="p">[</span><span class="nx">p</span><span class="p">],[</span><span class="nx">p</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">s</span><span class="p">),</span><span class="nx">h</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">isQuantifier</span><span class="o">&amp;&amp;!</span><span class="mi">0</span><span class="o">!==</span><span class="nx">h</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">greedy</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">greedy</span><span class="o">&amp;&amp;</span><span class="nb">isFinite</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">quantifier</span><span class="p">.</span><span class="nx">max</span><span class="p">),</span><span class="nx">B</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;!</span><span class="mi">0</span><span class="o">!==</span><span class="nx">h</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="nx">B</span><span class="o">&lt;</span><span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">quantifier</span><span class="p">.</span><span class="nx">max</span><span class="p">)</span><span class="o">?</span></div><div class='line' id='LC28'><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">quantifier</span><span class="p">.</span><span class="nx">max</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">;</span><span class="nx">B</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">matches</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">matches</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">m</span><span class="p">(</span><span class="nx">p</span><span class="p">,[</span><span class="nx">B</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">s</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">match</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">optionalQuantifier</span><span class="o">=</span><span class="nx">B</span><span class="o">&gt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">quantifier</span><span class="p">.</span><span class="nx">min</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="o">==</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">matches</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">B</span><span class="o">&gt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">quantifier</span><span class="p">.</span><span class="nx">min</span><span class="o">-</span><span class="mi">1</span><span class="p">){</span><span class="nx">D</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="k">else</span> <span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">else</span> <span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">k</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">h</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="k">else</span> <span class="nx">g</span><span class="o">++</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">J</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">shift</span><span class="p">()</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="nx">J</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">J</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">matches</span><span class="p">[</span><span class="nx">J</span><span class="p">].</span><span class="nx">isQuantifier</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">m</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matches</span><span class="p">[</span><span class="nx">J</span><span class="p">],[</span><span class="nx">J</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">s</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="o">==</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">h</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">)</span><span class="k">break</span><span class="p">}}</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">maskToken</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span></div><div class='line' id='LC29'><span class="p">[],</span><span class="nx">D</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">c</span><span class="p">])</span><span class="o">&amp;&amp;-</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;)</span><span class="nx">c</span><span class="o">--</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">n</span><span class="o">&amp;&amp;-</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">locator</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span><span class="k">else</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">tests</span><span class="p">[</span><span class="nx">c</span><span class="p">])</span><span class="o">&amp;&amp;-</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;)</span><span class="nx">c</span><span class="o">--</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">n</span><span class="o">&amp;&amp;-</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">locator</span><span class="p">.</span><span class="nx">slice</span><span class="p">())}}</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">k</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">d</span><span class="p">,[</span><span class="nx">c</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="o">==</span><span class="nx">a</span><span class="o">||</span><span class="nx">g</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">);</span><span class="nx">c</span><span class="o">++</span><span class="p">);(</span><span class="mi">0</span><span class="o">==</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="nx">D</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">match</span><span class="o">:</span><span class="p">{</span><span class="nx">fn</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">optionality</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">casing</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">def</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">},</span><span class="nx">locator</span><span class="o">:</span><span class="p">[]});</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">tests</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">}</span><span class="kd">function</span> <span class="nx">I</span><span class="p">(){</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">_buffer</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">_buffer</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">_buffer</span><span class="p">}</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(){</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="o">&amp;&amp;</span></div><div class='line' id='LC30'><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">C</span><span class="p">(),</span><span class="o">!</span><span class="mi">0</span><span class="p">));</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">}</span><span class="kd">function</span> <span class="nx">aa</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">t</span><span class="p">().</span><span class="nx">slice</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">)</span><span class="nx">q</span><span class="p">(),</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">delete</span> <span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="k">delete</span> <span class="nx">b</span><span class="p">.</span><span class="nx">tests</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">!=</span><span class="nx">e</span><span class="p">.</span><span class="nx">skipOptionalPartCharacter</span><span class="o">&amp;&amp;</span><span class="nx">T</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">ma</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">casing</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;upper&quot;</span><span class="o">:</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;lower&quot;</span><span class="o">:</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()}</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">T</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">k</span><span class="p">){</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">na</span><span class="p">){</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">P</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="kd">function</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">J</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">J</span><span class="p">.</span><span class="nx">match</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="nx">t</span><span class="p">();</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">D</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">cardinality</span><span class="p">;</span><span class="nx">D</span><span class="o">&gt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">D</span><span class="o">--</span><span class="p">)</span><span class="nx">p</span><span class="o">+=</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span></div><div class='line' id='LC31'><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">a</span><span class="o">-</span><span class="p">(</span><span class="nx">D</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span><span class="o">?</span><span class="nx">V</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="p">(</span><span class="nx">D</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">a</span><span class="o">-</span><span class="p">(</span><span class="nx">D</span><span class="o">-</span><span class="mi">1</span><span class="p">)].</span><span class="nx">input</span><span class="p">;</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">p</span><span class="o">+=</span><span class="nx">c</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="kc">null</span><span class="o">!=</span><span class="nx">g</span><span class="p">.</span><span class="nx">fn</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="o">!=</span><span class="nx">g</span><span class="p">.</span><span class="nx">def</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">!=</span><span class="nx">e</span><span class="p">.</span><span class="nx">skipOptionalPartCharacter</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="o">==</span><span class="nx">g</span><span class="p">.</span><span class="nx">def</span><span class="o">?!</span><span class="mi">1</span><span class="o">:</span><span class="p">{</span><span class="nx">c</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">def</span><span class="p">,</span><span class="nx">pos</span><span class="o">:</span><span class="nx">a</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">s</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">s</span><span class="p">.</span><span class="nx">c</span><span class="o">?</span><span class="nx">s</span><span class="p">.</span><span class="nx">c</span><span class="o">:</span><span class="nx">c</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">l</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">skipOptionalPartCharacter</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">===</span><span class="nx">g</span><span class="p">.</span><span class="nx">fn</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">def</span><span class="o">:</span><span class="nx">l</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">s</span><span class="p">.</span><span class="nx">remove</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">remove</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">remove</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">refreshFromBuffer</span><span class="p">){</span><span class="nx">p</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">refreshFromBuffer</span><span class="p">;</span><span class="nx">d</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">aa</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">p</span><span class="o">?</span><span class="nx">p</span><span class="o">:</span><span class="nx">p</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">end</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">s</span><span class="p">.</span><span class="nx">pos</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">s</span><span class="p">.</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">pos</span><span class="o">=</span><span class="nx">C</span><span class="p">(),</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">s</span><span class="p">.</span><span class="nx">pos</span><span class="o">?</span><span class="nx">s</span><span class="p">.</span><span class="nx">pos</span><span class="o">:</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="o">!=</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">s</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">T</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)),</span></div><div class='line' id='LC32'><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">s</span><span class="p">.</span><span class="nx">pos</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">pos</span><span class="o">!=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">pos</span><span class="p">,</span><span class="nx">aa</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">p</span><span class="p">),</span><span class="nx">p</span><span class="o">!=</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="nx">s</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">T</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)),</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">!=</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">s</span><span class="p">.</span><span class="nx">pos</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">s</span><span class="p">.</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">h</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span><span class="nx">J</span><span class="p">,{</span><span class="nx">input</span><span class="o">:</span><span class="nx">ma</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">g</span><span class="p">)}),</span><span class="nx">na</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">s</span><span class="o">=!</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}});</span><span class="k">return</span> <span class="nx">s</span><span class="p">}</span><span class="nx">d</span><span class="o">=!</span><span class="mi">0</span><span class="o">===</span><span class="nx">d</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">t</span><span class="p">(),</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="o">-</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">p</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="o">||</span><span class="kc">null</span><span class="o">!=</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">p</span><span class="p">].</span><span class="nx">fn</span><span class="p">);</span><span class="nx">p</span><span class="o">--</span><span class="p">)</span><span class="k">if</span><span class="p">((</span><span class="o">!</span><span class="nx">Q</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span><span class="o">||</span><span class="nx">l</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="o">!=</span><span class="nx">V</span><span class="p">(</span><span class="nx">p</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">P</span><span class="p">(</span><span class="nx">p</span><span class="p">).</span><span class="nx">length</span><span class="p">){</span><span class="nx">g</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">l</span><span class="p">[</span><span class="nx">p</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;=</span><span class="nx">R</span><span class="p">())</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">k</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">d</span><span class="o">&amp;&amp;!</span><span class="mi">1</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="k">if</span><span class="p">((</span><span class="nx">p</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">==</span><span class="nx">p</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">fn</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">def</span><span class="o">==</span><span class="nx">c</span><span class="o">||</span><span class="nx">c</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">skipOptionalPartCharacter</span><span class="p">))</span><span class="nx">l</span><span class="o">=</span></div><div class='line' id='LC33'><span class="p">{</span><span class="nx">caret</span><span class="o">:</span><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="k">else</span> <span class="k">if</span><span class="p">((</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">)])</span><span class="o">&amp;&amp;!</span><span class="nx">Q</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">D</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">p</span><span class="o">&lt;=</span><span class="nx">D</span><span class="p">;</span><span class="nx">p</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">k</span><span class="p">),</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">l</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="p">{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">a</span><span class="p">});</span><span class="k">return</span> <span class="nx">l</span><span class="p">}</span><span class="kd">function</span> <span class="nx">Q</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">B</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="kc">null</span><span class="o">!=</span><span class="nx">a</span><span class="p">.</span><span class="nx">fn</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">fn</span><span class="o">:!</span><span class="mi">1</span><span class="p">}</span><span class="kd">function</span> <span class="nx">R</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">;</span><span class="nx">N</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;maxLength&quot;</span><span class="p">);</span><span class="o">-</span><span class="mi">1</span><span class="o">==</span><span class="nx">N</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">N</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">greedy</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">C</span><span class="p">();</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">locator</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="o">||</span><span class="kc">null</span><span class="o">!=</span><span class="nx">a</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">fn</span><span class="o">||</span><span class="kc">null</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">fn</span><span class="o">&amp;&amp;</span><span class="s2">&quot;&quot;</span><span class="o">!=</span><span class="nx">a</span><span class="p">.</span><span class="nx">match</span><span class="p">.</span><span class="nx">def</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="o">=</span><span class="nx">p</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">locator</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">}</span><span class="k">else</span> <span class="nx">a</span><span class="o">=</span><span class="nx">t</span><span class="p">().</span><span class="nx">length</span><span class="p">;</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">==</span></div><div class='line' id='LC34'><span class="nx">N</span><span class="o">||</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">N</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">N</span><span class="p">}</span><span class="kd">function</span> <span class="nx">E</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">R</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;=</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">b</span><span class="p">;</span><span class="k">for</span><span class="p">(;</span><span class="o">++</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="o">&amp;&amp;!</span><span class="nx">Q</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="p">.</span><span class="nx">nojumps</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">nojumpsThreshold</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">););</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">X</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&gt;=</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(;</span><span class="mi">0</span><span class="o">&lt;--</span><span class="nx">a</span><span class="o">&amp;&amp;!</span><span class="nx">Q</span><span class="p">(</span><span class="nx">a</span><span class="p">););</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">));</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">V</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="nx">B</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">placeholder</span><span class="o">||</span><span class="p">(</span><span class="kc">null</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">fn</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">def</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">a</span><span class="o">%</span><span class="nx">e</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">.</span><span class="nx">length</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">S</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">k</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">h</span><span class="o">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span><span class="o">:</span><span class="nx">la</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">()).</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">q</span><span class="p">();</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">k</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">p</span><span class="p">,</span><span class="nx">h</span><span class="o">=-</span><span class="mi">1</span><span class="o">==</span><span class="nx">h</span><span class="o">?</span><span class="nx">h</span><span class="o">:</span></div><div class='line' id='LC35'><span class="nx">X</span><span class="p">(</span><span class="nx">h</span><span class="p">),</span><span class="nx">s</span><span class="o">=-</span><span class="mi">1</span><span class="o">==</span><span class="nx">h</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">E</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="o">-</span><span class="mi">1</span><span class="o">==</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">I</span><span class="p">().</span><span class="nx">slice</span><span class="p">(</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">s</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">ba</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)}</span><span class="k">else</span> <span class="nx">ba</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">p</span><span class="p">});</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">onKeyPress</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">(),</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">$</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">t</span><span class="p">(),</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="s2">&quot;:focus&quot;</span><span class="p">)</span><span class="o">?</span><span class="nx">E</span><span class="p">(</span><span class="nx">C</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">fa</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">escapeRegex</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">la</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;(&quot;</span><span class="o">+</span><span class="nx">fa</span><span class="p">(</span><span class="nx">I</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">))</span><span class="o">+</span><span class="s2">&quot;)*$&quot;</span><span class="p">),</span><span class="s2">&quot;&quot;</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">ga</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;hasDatepicker&quot;</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">,</span><span class="nx">h</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span> <span class="k">in</span> <span class="nx">d</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">match</span><span class="o">&amp;&amp;</span></div><div class='line' id='LC36'><span class="kc">null</span><span class="o">!=</span><span class="nx">d</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">match</span><span class="p">.</span><span class="nx">fn</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">input</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="nx">A</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()</span><span class="o">:</span><span class="nx">c</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">A</span><span class="o">?</span><span class="nx">t</span><span class="p">().</span><span class="nx">reverse</span><span class="p">()</span><span class="o">:</span><span class="nx">t</span><span class="p">()).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">onUnMask</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">onUnMask</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">));</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">_valueGet</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">O</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="o">!</span><span class="nx">A</span><span class="o">||</span><span class="s2">&quot;number&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">greedy</span><span class="o">&amp;&amp;</span><span class="s2">&quot;&quot;</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">placeholder</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">t</span><span class="p">().</span><span class="nx">length</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">jquery</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">O</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">O</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="s2">&quot;number&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">b</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">)</span><span class="o">||</span><span class="p">{};</span><span class="nx">d</span><span class="p">.</span><span class="nx">caret</span><span class="o">=</span><span class="p">{</span><span class="nx">begin</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="nx">c</span><span class="p">};</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="s2">&quot;:visible&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="o">=</span></div><div class='line' id='LC37'><span class="nx">a</span><span class="p">.</span><span class="nx">scrollWidth</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">++</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">setSelectionRange</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">selectionStart</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">selectionEnd</span><span class="o">=</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">createTextRange</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">createTextRange</span><span class="p">(),</span><span class="nx">a</span><span class="p">.</span><span class="nx">collapse</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">moveEnd</span><span class="p">(</span><span class="s2">&quot;character&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">moveStart</span><span class="p">(</span><span class="s2">&quot;character&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">select</span><span class="p">()))}</span><span class="k">else</span> <span class="k">return</span> <span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">),</span><span class="o">!</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="s2">&quot;:visible&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">d</span><span class="p">.</span><span class="nx">caret</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">caret</span><span class="p">.</span><span class="nx">begin</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">caret</span><span class="p">.</span><span class="nx">end</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">setSelectionRange</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">selectionStart</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">selectionEnd</span><span class="p">)</span><span class="o">:</span><span class="nb">document</span><span class="p">.</span><span class="nx">selection</span><span class="o">&amp;&amp;</span><span class="nb">document</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">createRange</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">createRange</span><span class="p">(),</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">duplicate</span><span class="p">().</span><span class="nx">moveStart</span><span class="p">(</span><span class="s2">&quot;character&quot;</span><span class="p">,</span></div><div class='line' id='LC38'><span class="o">-</span><span class="mi">1</span><span class="nx">E5</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">O</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">O</span><span class="p">(</span><span class="nx">c</span><span class="p">),{</span><span class="nx">begin</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="nx">c</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">ca</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">t</span><span class="p">(),</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">C</span><span class="p">(),</span><span class="nx">k</span><span class="o">=</span><span class="p">{},</span><span class="nx">g</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">locator</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">l</span><span class="o">=</span><span class="nx">p</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">locator</span><span class="p">.</span><span class="nx">slice</span><span class="p">(),</span><span class="nx">k</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,{},</span><span class="nx">l</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">d</span><span class="o">--</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">match</span><span class="p">,(</span><span class="nx">l</span><span class="p">.</span><span class="nx">optionality</span><span class="o">||</span><span class="nx">l</span><span class="p">.</span><span class="nx">optionalQuantifier</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">==</span><span class="nx">V</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">l</span><span class="p">))</span><span class="nx">c</span><span class="o">--</span><span class="p">;</span><span class="k">else</span> <span class="k">break</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="o">?</span><span class="p">{</span><span class="nx">l</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">def</span><span class="o">:</span><span class="nx">k</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">?</span><span class="nx">k</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">match</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">}</span><span class="o">:</span><span class="nx">c</span><span class="p">}</span><span class="kd">function</span> <span class="nx">da</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">t</span><span class="p">().</span><span class="nx">slice</span><span class="p">(),</span><span class="nx">e</span><span class="o">=</span><span class="nx">ca</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">U</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">isComplete</span><span class="p">))</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">isComplete</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span></div><div class='line' id='LC39'><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="o">!=</span><span class="nx">e</span><span class="p">.</span><span class="nx">repeat</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">ca</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">X</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">l</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">C</span><span class="p">()</span><span class="o">==</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">def</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">def</span><span class="p">.</span><span class="nx">newBlockMarker</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">def</span><span class="p">.</span><span class="nx">optionalQuantifier</span><span class="p">))</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;=</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">Q</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">||</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">==</span><span class="nx">V</span><span class="p">(</span><span class="nx">c</span><span class="p">))</span><span class="o">||!</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">!=</span><span class="nx">V</span><span class="p">(</span><span class="nx">c</span><span class="p">)){</span><span class="nx">b</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span><span class="p">}}</span><span class="k">return</span> <span class="nx">b</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">oa</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">_data</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">events</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;inputmask&quot;</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">namespace</span><span class="o">&amp;&amp;</span><span class="s2">&quot;setvalue&quot;</span><span class="o">!=</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">handler</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">handler</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">readOnly</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">disabled</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">;</span><span class="k">else</span> <span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)}}})})}</span><span class="kd">function</span> <span class="nx">pa</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span></div><div class='line' id='LC40'><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">||!</span><span class="mi">0</span><span class="o">!=</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">inputmaskpatch</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">get</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="p">},</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">set</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">).</span><span class="nx">opts</span><span class="p">.</span><span class="nx">autoUnmask</span><span class="p">)</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">(</span><span class="s2">&quot;unmaskedvalue&quot;</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">).</span><span class="nx">maskset</span><span class="p">.</span><span class="nx">_buffer</span><span class="p">)</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="o">!=</span><span class="nx">b</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">}</span><span class="k">return</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">);</span></div><div class='line' id='LC41'><span class="nx">d</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">onBeforeMask</span><span class="p">)</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">onBeforeMask</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">z</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">opts</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="s2">&quot;setvalue.inputmask&quot;</span><span class="p">))</span><span class="o">:</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="nx">inputmaskpatch</span><span class="o">:!</span><span class="mi">0</span><span class="p">}}}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">autoUnmask</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">(</span><span class="s2">&quot;unmaskedvalue&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">!=</span><span class="nx">I</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">);</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">onBeforeMask</span><span class="p">)</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">opts</span><span class="p">.</span><span class="nx">onBeforeMask</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">z</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">opts</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">),</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="s2">&quot;setvalue.inputmask&quot;</span><span class="p">))</span><span class="o">:</span></div><div class='line' id='LC42'><span class="nx">k</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;mouseenter.inputmask&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">()</span><span class="o">!=</span><span class="nx">t</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;setvalue&quot;</span><span class="p">)});</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">_data</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">events</span><span class="p">.</span><span class="nx">mouseover</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">--</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">}}</span><span class="kd">var</span> <span class="nx">h</span><span class="p">,</span><span class="nx">k</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">_valueGet</span><span class="o">||</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="o">&amp;&amp;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="p">),</span><span class="nb">document</span><span class="p">.</span><span class="nx">__lookupGetter__</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">__lookupGetter__</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__lookupGetter__</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__lookupSetter__</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">__defineGetter__</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">__defineSetter__</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span></div><div class='line' id='LC43'><span class="nx">c</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="p">},</span><span class="nx">k</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">b</span><span class="p">},</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">),</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">)),</span><span class="nx">a</span><span class="p">.</span><span class="nx">_valueGet</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">A</span><span class="o">?</span><span class="nx">h</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">h</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)},</span><span class="nx">a</span><span class="p">.</span><span class="nx">_valueSet</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">k</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">A</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">)})}</span><span class="kd">function</span> <span class="nx">ha</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">numericInput</span><span class="o">||</span><span class="nx">A</span><span class="p">)</span><span class="nx">c</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">BACKSPACE</span><span class="o">?</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">DELETE</span><span class="o">:</span><span class="nx">c</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">DELETE</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">BACKSPACE</span><span class="p">),</span><span class="nx">A</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">end</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">end</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">begin</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">begin</span><span class="o">=</span><span class="nx">a</span><span class="p">);</span><span class="nx">c</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">BACKSPACE</span><span class="o">&amp;&amp;</span><span class="mi">1</span><span class="o">&gt;=</span><span class="nx">d</span><span class="p">.</span><span class="nx">end</span><span class="o">-</span><span class="nx">d</span><span class="p">.</span><span class="nx">begin</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">begin</span><span class="o">=</span><span class="nx">X</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">begin</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">DELETE</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">begin</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">end</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">end</span><span class="o">++</span><span class="p">;</span></div><div class='line' id='LC44'><span class="nx">n</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">begin</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">end</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">C</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">begin</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">p</span><span class="o">=</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">begin</span><span class="o">?</span><span class="nx">E</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">begin</span><span class="p">}</span><span class="kd">function</span> <span class="nx">$</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">refreshFromBuffer</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">refreshFromBuffer</span><span class="p">;</span><span class="nx">aa</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">end</span><span class="p">);</span><span class="nx">q</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">t</span><span class="p">()),</span><span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">caret</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">begin</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">caret</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">end</span><span class="p">))}}</span><span class="kd">function</span> <span class="nx">ia</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">ea</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">x</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">h</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">BACKSPACE</span><span class="o">||</span><span class="nx">h</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">DELETE</span><span class="o">||</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="mi">127</span><span class="o">==</span><span class="nx">h</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">ctrlKey</span><span class="o">&amp;&amp;</span><span class="mi">88</span><span class="o">==</span><span class="nx">h</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">(),</span><span class="mi">88</span><span class="o">==</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">K</span><span class="o">=</span><span class="nx">t</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)),</span><span class="nx">ha</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">H</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">t</span><span class="p">(),</span><span class="nx">b</span><span class="p">.</span><span class="nx">p</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">()</span><span class="o">==</span><span class="nx">I</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;cleared&quot;</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">showTooltip</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">mask</span><span class="p">))</span><span class="o">:</span></div><div class='line' id='LC45'><span class="nx">h</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">END</span><span class="o">||</span><span class="nx">h</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">PAGE_DOWN</span><span class="o">?</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">C</span><span class="p">());</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="o">||</span><span class="nx">b</span><span class="o">!=</span><span class="nx">R</span><span class="p">()</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">shiftKey</span><span class="o">||</span><span class="nx">b</span><span class="o">--</span><span class="p">;</span><span class="nx">x</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">shiftKey</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">begin</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="nx">h</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">HOME</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">shiftKey</span><span class="o">||</span><span class="nx">h</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">PAGE_UP</span><span class="o">?</span><span class="nx">x</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">shiftKey</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">begin</span><span class="o">:</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="nx">h</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">ESCAPE</span><span class="o">||</span><span class="mi">90</span><span class="o">==</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">ctrlKey</span><span class="o">?</span><span class="p">(</span><span class="nx">S</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">K</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)),</span><span class="nx">d</span><span class="p">.</span><span class="nx">click</span><span class="p">())</span><span class="o">:</span><span class="nx">h</span><span class="o">!=</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">INSERT</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">shiftKey</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">ctrlKey</span><span class="o">?!</span><span class="mi">1</span><span class="o">!=</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">shiftKey</span><span class="o">||</span><span class="p">(</span><span class="nx">h</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">RIGHT</span><span class="o">?</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">x</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">x</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">begin</span><span class="p">)},</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="nx">h</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">LEFT</span><span class="o">&amp;&amp;</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">x</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">x</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">A</span><span class="o">?</span></div><div class='line' id='LC46'><span class="nx">a</span><span class="p">.</span><span class="nx">begin</span><span class="o">+</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">begin</span><span class="o">-</span><span class="mi">1</span><span class="p">)},</span><span class="mi">0</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="o">=!</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="p">,</span><span class="nx">x</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="o">||</span><span class="nx">g</span><span class="p">.</span><span class="nx">begin</span><span class="o">!=</span><span class="nx">R</span><span class="p">()</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">begin</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">begin</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">x</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">onKeyDown</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">t</span><span class="p">(),</span><span class="nx">d</span><span class="p">.</span><span class="nx">begin</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">$</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">ja</span><span class="o">=-</span><span class="mi">1</span><span class="o">!=</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">ignorables</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">ba</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">l</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">ea</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">ea</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="nb">window</span><span class="p">.</span><span class="nx">event</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">which</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">charCode</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">ctrlKey</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">altKey</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">ctrlKey</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">metaKey</span><span class="o">||</span><span class="nx">ja</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="o">!</span><span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="mi">46</span><span class="o">==</span><span class="nx">d</span><span class="o">&amp;&amp;!</span><span class="mi">1</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">shiftKey</span><span class="o">&amp;&amp;</span><span class="s2">&quot;,&quot;</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">radixPoint</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">44</span><span class="p">);</span><span class="kd">var</span> <span class="nx">n</span><span class="p">,</span><span class="nx">B</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">c</span><span class="o">?</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="o">?</span><span class="nx">l</span><span class="o">:</span></div><div class='line' id='LC47'><span class="nx">C</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="nx">begin</span><span class="o">:</span><span class="nx">l</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="nx">l</span><span class="p">})</span><span class="o">:</span><span class="nx">n</span><span class="o">=</span><span class="nx">x</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">A</span><span class="o">?</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">begin</span><span class="o">-</span><span class="nx">n</span><span class="p">.</span><span class="nx">end</span><span class="o">||</span><span class="mi">1</span><span class="o">==</span><span class="nx">n</span><span class="p">.</span><span class="nx">begin</span><span class="o">-</span><span class="nx">n</span><span class="p">.</span><span class="nx">end</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="o">:</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">end</span><span class="o">-</span><span class="nx">n</span><span class="p">.</span><span class="nx">begin</span><span class="o">||</span><span class="mi">1</span><span class="o">==</span><span class="nx">n</span><span class="p">.</span><span class="nx">end</span><span class="o">-</span><span class="nx">n</span><span class="p">.</span><span class="nx">begin</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">undoPositions</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,{},</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">),</span><span class="nx">ha</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">DELETE</span><span class="p">,</span><span class="nx">n</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="o">=!</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="p">,</span><span class="nx">h</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">begin</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="o">=!</span><span class="nx">e</span><span class="p">.</span><span class="nx">insertMode</span><span class="p">),</span><span class="nx">l</span><span class="o">=!</span><span class="nx">e</span><span class="p">.</span><span class="nx">multi</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeOutBuffer</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">A</span><span class="o">&amp;&amp;!</span><span class="nx">l</span><span class="o">?</span><span class="nx">n</span><span class="p">.</span><span class="nx">end</span><span class="o">:</span><span class="nx">n</span><span class="p">.</span><span class="nx">begin</span><span class="p">;</span><span class="kd">var</span> <span class="nx">v</span><span class="o">=</span><span class="nx">T</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">v</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">!==</span><span class="nx">v</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">v</span><span class="p">.</span><span class="nx">pos</span><span class="o">?</span><span class="nx">v</span><span class="p">.</span><span class="nx">pos</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">v</span><span class="p">.</span><span class="nx">c</span><span class="o">?</span><span class="nx">v</span><span class="p">.</span><span class="nx">c</span><span class="o">:</span><span class="nx">d</span><span class="p">),</span><span class="nx">q</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">v</span><span class="p">.</span><span class="nx">caret</span><span class="o">?</span><span class="nx">B</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">caret</span><span class="o">:</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">g</span><span class="p">[</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="mi">1</span><span class="o">&lt;</span></div><div class='line' id='LC48'><span class="nx">P</span><span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">locator</span><span class="p">.</span><span class="nx">slice</span><span class="p">(),</span><span class="nx">n</span><span class="p">).</span><span class="nx">length</span><span class="o">?</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="o">:</span><span class="nx">E</span><span class="p">(</span><span class="nx">n</span><span class="p">)),</span><span class="nx">b</span><span class="p">.</span><span class="nx">p</span><span class="o">=</span><span class="nx">B</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">k</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">e</span><span class="p">.</span><span class="nx">onKeyValidation</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">e</span><span class="p">)},</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">writeOutBuffer</span><span class="o">&amp;&amp;!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">v</span><span class="p">){</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="nx">t</span><span class="p">();</span><span class="nx">H</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">c</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">numericInput</span><span class="o">?</span><span class="nx">X</span><span class="p">(</span><span class="nx">B</span><span class="p">)</span><span class="o">:</span><span class="nx">B</span><span class="p">);</span><span class="o">!</span><span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">U</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;complete&quot;</span><span class="p">);</span><span class="nx">W</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">)},</span><span class="mi">0</span><span class="p">)}</span><span class="k">else</span> <span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">undoPositions</span><span class="p">)}</span><span class="k">else</span> <span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">undoPositions</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">showTooltip</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">mask</span><span class="p">);</span><span class="nx">a</span><span class="o">&amp;&amp;!</span><span class="mi">0</span><span class="o">!=</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span><span class="o">:</span></div><div class='line' id='LC49'><span class="nx">a</span><span class="p">.</span><span class="nx">returnValue</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">x</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">onKeyPress</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">t</span><span class="p">(),</span><span class="nx">c</span><span class="p">.</span><span class="nx">begin</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">F</span> <span class="k">in</span> <span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">);}}</span><span class="kd">function</span> <span class="nx">qa</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">t</span><span class="p">(),</span><span class="nx">h</span><span class="o">=</span><span class="nx">x</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">onKeyUp</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">begin</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">c</span><span class="o">==</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">TAB</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">showMaskOnFocus</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;focus-inputmask&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">().</span><span class="nx">length</span><span class="o">?</span><span class="p">(</span><span class="nx">q</span><span class="p">(),</span><span class="nx">d</span><span class="o">=</span><span class="nx">t</span><span class="p">(),</span><span class="nx">H</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">x</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">K</span><span class="o">=</span><span class="nx">t</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">H</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">x</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">O</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">O</span><span class="p">(</span><span class="nx">R</span><span class="p">()))))}</span><span class="kd">function</span> <span class="nx">ka</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">W</span><span class="o">&amp;&amp;</span><span class="s2">&quot;input&quot;</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="k">return</span> <span class="nx">W</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;propertychange&quot;</span><span class="o">==</span></div><div class='line' id='LC50'><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">().</span><span class="nx">length</span><span class="o">&lt;=</span><span class="nx">R</span><span class="p">())</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="s2">&quot;paste&quot;</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">clipboardData</span><span class="o">&amp;&amp;</span><span class="nb">window</span><span class="p">.</span><span class="nx">clipboardData</span><span class="p">.</span><span class="nx">getData</span><span class="o">?</span><span class="nx">c</span><span class="o">=</span><span class="nb">window</span><span class="p">.</span><span class="nx">clipboardData</span><span class="p">.</span><span class="nx">getData</span><span class="p">(</span><span class="s2">&quot;Text&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">originalEvent</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">originalEvent</span><span class="p">.</span><span class="nx">clipboardData</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">originalEvent</span><span class="p">.</span><span class="nx">clipboardData</span><span class="p">.</span><span class="nx">getData</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">originalEvent</span><span class="p">.</span><span class="nx">clipboardData</span><span class="p">.</span><span class="nx">getData</span><span class="p">(</span><span class="s2">&quot;text/plain&quot;</span><span class="p">)));</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">onBeforePaste</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">onBeforePaste</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">;</span><span class="nx">S</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">U</span><span class="p">(</span><span class="nx">t</span><span class="p">())</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;complete&quot;</span><span class="p">);</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="kd">function</span> <span class="nx">ra</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">W</span><span class="o">&amp;&amp;</span><span class="s2">&quot;input&quot;</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="k">return</span> <span class="nx">W</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span></div><div class='line' id='LC51'><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">x</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">(),</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;(&quot;</span><span class="o">+</span><span class="nx">fa</span><span class="p">(</span><span class="nx">I</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">))</span><span class="o">+</span><span class="s2">&quot;)*&quot;</span><span class="p">),</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">x</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">x</span><span class="p">(</span><span class="k">this</span><span class="p">));</span><span class="mi">1</span><span class="o">!=</span><span class="nx">t</span><span class="p">().</span><span class="nx">length</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="p">)</span><span class="o">==</span><span class="nx">t</span><span class="p">()[</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="p">]</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">==</span><span class="nx">t</span><span class="p">()[</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="p">]</span><span class="o">||</span><span class="nx">Q</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">BACKSPACE</span><span class="p">,</span><span class="nx">ia</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">sa</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">r</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">is</span><span class="p">(</span><span class="s2">&quot;:input&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="s2">&quot;number&quot;</span><span class="o">!=</span><span class="nx">r</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;type&quot;</span><span class="p">)){</span><span class="nx">r</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">,{</span><span class="nx">maskset</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">opts</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">isRTL</span><span class="o">:!</span><span class="mi">1</span><span class="p">});</span><span class="nx">e</span><span class="p">.</span><span class="nx">showTooltip</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;title&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">mask</span><span class="p">);(</span><span class="s2">&quot;rtl&quot;</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">dir</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">rightAlign</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;text-align&quot;</span><span class="p">,</span></div><div class='line' id='LC52'><span class="s2">&quot;right&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;rtl&quot;</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">dir</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">numericInput</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">dir</span><span class="o">=</span><span class="s2">&quot;ltr&quot;</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s2">&quot;dir&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">isRTL</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">A</span><span class="o">=!</span><span class="mi">0</span><span class="p">}</span><span class="nx">r</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">&quot;.inputmask&quot;</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s2">&quot;focus-inputmask&quot;</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">closest</span><span class="p">(</span><span class="s2">&quot;form&quot;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;submit&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">K</span><span class="o">!=</span><span class="nx">t</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">change</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">autoUnmask</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">removeMaskOnSubmit</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">(</span><span class="s2">&quot;remove&quot;</span><span class="p">)}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;reset&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">r</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;setvalue&quot;</span><span class="p">)},</span><span class="mi">0</span><span class="p">)});</span><span class="nx">r</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;mouseenter.inputmask&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="o">!</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;focus-inputmask&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">showMaskOnHover</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">()</span><span class="o">!=</span></div><div class='line' id='LC53'><span class="nx">t</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">H</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">())}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;blur.inputmask&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">(),</span><span class="nx">c</span><span class="o">=</span><span class="nx">t</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s2">&quot;focus-inputmask&quot;</span><span class="p">);</span><span class="nx">K</span><span class="o">!=</span><span class="nx">t</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">change</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">clearMaskOnLostFocus</span><span class="o">&amp;&amp;</span><span class="s2">&quot;&quot;</span><span class="o">!=</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">==</span><span class="nx">I</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">da</span><span class="p">(</span><span class="k">this</span><span class="p">));</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">U</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;incomplete&quot;</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">clearIncomplete</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">q</span><span class="p">(),</span><span class="nx">e</span><span class="p">.</span><span class="nx">clearMaskOnLostFocus</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">I</span><span class="p">().</span><span class="nx">slice</span><span class="p">(),</span><span class="nx">H</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">))))}}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;focus.inputmask&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">showMaskOnFocus</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;focus-inputmask&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span></div><div class='line' id='LC54'><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">.</span><span class="nx">showMaskOnHover</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">showMaskOnHover</span><span class="o">&amp;&amp;</span><span class="s2">&quot;&quot;</span><span class="o">==</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">()</span><span class="o">!=</span><span class="nx">t</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">H</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">t</span><span class="p">(),</span><span class="nx">E</span><span class="p">(</span><span class="nx">C</span><span class="p">()));</span><span class="nx">a</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&quot;focus-inputmask&quot;</span><span class="p">);</span><span class="nx">K</span><span class="o">=</span><span class="nx">t</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;mouseleave.inputmask&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">clearMaskOnLostFocus</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;focus-inputmask&quot;</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">()</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;placeholder&quot;</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">()</span><span class="o">==</span><span class="nx">I</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">||</span><span class="s2">&quot;&quot;</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">()</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">da</span><span class="p">(</span><span class="k">this</span><span class="p">)))}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;click.inputmask&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="s2">&quot;:focus&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">end</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span></div><div class='line' id='LC55'><span class="nx">A</span><span class="o">?</span><span class="nx">O</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">C</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">E</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">?</span><span class="nx">Q</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">?</span><span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">E</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="o">:</span><span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)}},</span><span class="mi">0</span><span class="p">)}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;dblclick.inputmask&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">E</span><span class="p">(</span><span class="nx">C</span><span class="p">()))},</span><span class="mi">0</span><span class="p">)}).</span><span class="nx">bind</span><span class="p">(</span><span class="nx">M</span><span class="o">+</span><span class="s2">&quot;.inputmask dragdrop.inputmask drop.inputmask&quot;</span><span class="p">,</span><span class="nx">ka</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;setvalue.inputmask&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">S</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">K</span><span class="o">=</span><span class="nx">t</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)}).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;complete.inputmask&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">oncomplete</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;incomplete.inputmask&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">onincomplete</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;cleared.inputmask&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">oncleared</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;keydown.inputmask&quot;</span><span class="p">,</span><span class="nx">ia</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;keypress.inputmask&quot;</span><span class="p">,</span><span class="nx">ba</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;keyup.inputmask&quot;</span><span class="p">,</span><span class="nx">qa</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">||</span></div><div class='line' id='LC56'><span class="nx">u</span><span class="o">||</span><span class="nx">y</span><span class="o">||</span><span class="nx">L</span><span class="p">)</span><span class="s2">&quot;input&quot;</span><span class="o">==</span><span class="nx">M</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="nx">M</span><span class="o">+</span><span class="s2">&quot;.inputmask&quot;</span><span class="p">),</span><span class="nx">r</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;input.inputmask&quot;</span><span class="p">,</span><span class="nx">ra</span><span class="p">);</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;input.inputmask&quot;</span><span class="p">,</span><span class="nx">ka</span><span class="p">);</span><span class="nx">pa</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">onBeforeMask</span><span class="p">)</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">onBeforeMask</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">(),</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">();</span><span class="nx">S</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">K</span><span class="o">=</span><span class="nx">t</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">h</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="nx">h</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">activeElement</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">k</span><span class="p">){}</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">U</span><span class="p">(</span><span class="nx">t</span><span class="p">())</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">clearIncomplete</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">clearMaskOnLostFocus</span><span class="o">?</span><span class="nx">t</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">==</span><span class="nx">I</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">da</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">H</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">t</span><span class="p">());</span><span class="nx">h</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&quot;focus-inputmask&quot;</span><span class="p">),</span><span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">E</span><span class="p">(</span><span class="nx">C</span><span class="p">())));</span><span class="nx">oa</span><span class="p">(</span><span class="nx">a</span><span class="p">)}}</span><span class="kd">var</span> <span class="nx">A</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">K</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">ea</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">W</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">ja</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">N</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">a</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">action</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;isComplete&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">r</span><span class="o">=</span></div><div class='line' id='LC57'><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">el</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">).</span><span class="nx">maskset</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">).</span><span class="nx">opts</span><span class="p">,</span><span class="nx">U</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">buffer</span><span class="p">);</span><span class="k">case</span> <span class="s2">&quot;unmaskedvalue&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">$input</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">).</span><span class="nx">maskset</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">).</span><span class="nx">opts</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">$input</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">).</span><span class="nx">isRTL</span><span class="p">,</span><span class="nx">ga</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">$input</span><span class="p">);</span><span class="k">case</span> <span class="s2">&quot;mask&quot;</span><span class="o">:</span><span class="nx">K</span><span class="o">=</span><span class="nx">t</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">sa</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;format&quot;</span><span class="o">:</span><span class="nx">r</span><span class="o">=</span><span class="nx">f</span><span class="p">({});</span><span class="nx">r</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">,{</span><span class="nx">maskset</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">opts</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">isRTL</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">numericInput</span><span class="p">});</span><span class="nx">e</span><span class="p">.</span><span class="nx">numericInput</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">A</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="kd">var</span> <span class="nx">G</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">S</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">A</span><span class="o">?</span><span class="nx">G</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()</span><span class="o">:</span><span class="nx">G</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">onKeyPress</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">(),</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="nx">A</span><span class="o">?</span><span class="nx">t</span><span class="p">().</span><span class="nx">reverse</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">().</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span></div><div class='line' id='LC58'><span class="k">case</span> <span class="s2">&quot;isValid&quot;</span><span class="o">:</span><span class="nx">r</span><span class="o">=</span><span class="nx">f</span><span class="p">({});</span><span class="nx">r</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">,{</span><span class="nx">maskset</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">opts</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">isRTL</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">numericInput</span><span class="p">});</span><span class="nx">e</span><span class="p">.</span><span class="nx">numericInput</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">A</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="nx">G</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">S</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">A</span><span class="o">?</span><span class="nx">G</span><span class="p">.</span><span class="nx">reverse</span><span class="p">()</span><span class="o">:</span><span class="nx">G</span><span class="p">);</span><span class="kd">var</span> <span class="nx">G</span><span class="o">=</span><span class="nx">t</span><span class="p">(),</span><span class="nx">ta</span><span class="o">=</span><span class="nx">ca</span><span class="p">();</span><span class="nx">G</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">ta</span><span class="p">;</span><span class="k">return</span> <span class="nx">U</span><span class="p">(</span><span class="nx">G</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="o">==</span><span class="nx">G</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="k">case</span> <span class="s2">&quot;getemptymask&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">r</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">el</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">).</span><span class="nx">maskset</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">).</span><span class="nx">opts</span><span class="p">,</span><span class="nx">I</span><span class="p">();</span><span class="k">case</span> <span class="s2">&quot;remove&quot;</span><span class="o">:</span><span class="kd">var</span> <span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">el</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">z</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">).</span><span class="nx">maskset</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">).</span><span class="nx">opts</span><span class="p">;</span><span class="nx">z</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">(</span><span class="nx">ga</span><span class="p">(</span><span class="nx">r</span><span class="p">));</span><span class="nx">r</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">&quot;.inputmask&quot;</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s2">&quot;focus-inputmask&quot;</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">removeData</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">);</span></div><div class='line' id='LC59'><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">G</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">z</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="p">));</span><span class="nx">G</span><span class="o">&amp;&amp;</span><span class="nx">G</span><span class="p">.</span><span class="nx">get</span><span class="o">?</span><span class="nx">z</span><span class="p">.</span><span class="nx">_valueGet</span><span class="o">&amp;&amp;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">z</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="p">,{</span><span class="nx">get</span><span class="o">:</span><span class="nx">z</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="nx">z</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">})</span><span class="o">:</span><span class="nb">document</span><span class="p">.</span><span class="nx">__lookupGetter__</span><span class="o">&amp;&amp;</span><span class="nx">z</span><span class="p">.</span><span class="nx">__lookupGetter__</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">z</span><span class="p">.</span><span class="nx">_valueGet</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">__defineGetter__</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">),</span><span class="nx">z</span><span class="p">.</span><span class="nx">__defineSetter__</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">));</span><span class="k">try</span><span class="p">{</span><span class="k">delete</span> <span class="nx">z</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">,</span><span class="k">delete</span> <span class="nx">z</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">ua</span><span class="p">){</span><span class="nx">z</span><span class="p">.</span><span class="nx">_valueGet</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">_valueSet</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">}}};</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="o">=</span><span class="p">{</span><span class="nx">defaults</span><span class="o">:</span><span class="p">{</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;_&quot;</span><span class="p">,</span><span class="nx">optionalmarker</span><span class="o">:</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="s2">&quot;[&quot;</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="s2">&quot;]&quot;</span><span class="p">},</span><span class="nx">quantifiermarker</span><span class="o">:</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="s2">&quot;{&quot;</span><span class="p">,</span></div><div class='line' id='LC60'><span class="nx">end</span><span class="o">:</span><span class="s2">&quot;}&quot;</span><span class="p">},</span><span class="nx">groupmarker</span><span class="o">:</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="s2">&quot;(&quot;</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="s2">&quot;)&quot;</span><span class="p">},</span><span class="nx">alternatormarker</span><span class="o">:</span><span class="s2">&quot;|&quot;</span><span class="p">,</span><span class="nx">escapeChar</span><span class="o">:</span><span class="s2">&quot;\\&quot;</span><span class="p">,</span><span class="nx">mask</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">oncomplete</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">noop</span><span class="p">,</span><span class="nx">onincomplete</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">noop</span><span class="p">,</span><span class="nx">oncleared</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">noop</span><span class="p">,</span><span class="nx">repeat</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">greedy</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">autoUnmask</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">removeMaskOnSubmit</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">clearMaskOnLostFocus</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">insertMode</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">clearIncomplete</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">aliases</span><span class="o">:</span><span class="p">{},</span><span class="nx">alias</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">onKeyUp</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">noop</span><span class="p">,</span><span class="nx">onKeyPress</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">noop</span><span class="p">,</span><span class="nx">onKeyDown</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">noop</span><span class="p">,</span><span class="nx">onBeforeMask</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">onBeforePaste</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">onUnMask</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">showMaskOnFocus</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">showMaskOnHover</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">onKeyValidation</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">noop</span><span class="p">,</span><span class="nx">skipOptionalPartCharacter</span><span class="o">:</span><span class="s2">&quot; &quot;</span><span class="p">,</span><span class="nx">showTooltip</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">numericInput</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span></div><div class='line' id='LC61'><span class="nx">rightAlign</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">radixPoint</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">nojumps</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">nojumpsThreshold</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">definitions</span><span class="o">:</span><span class="p">{</span><span class="mi">9</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[0-9]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">definitionSymbol</span><span class="o">:</span><span class="s2">&quot;*&quot;</span><span class="p">},</span><span class="nx">a</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[A-Za-z\u0410-\u044f\u0401\u0451]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">definitionSymbol</span><span class="o">:</span><span class="s2">&quot;*&quot;</span><span class="p">},</span><span class="s2">&quot;*&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[A-Za-z\u0410-\u044f\u0401\u04510-9]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">}},</span><span class="nx">keyCode</span><span class="o">:</span><span class="p">{</span><span class="nx">ALT</span><span class="o">:</span><span class="mi">18</span><span class="p">,</span><span class="nx">BACKSPACE</span><span class="o">:</span><span class="mi">8</span><span class="p">,</span><span class="nx">CAPS_LOCK</span><span class="o">:</span><span class="mi">20</span><span class="p">,</span><span class="nx">COMMA</span><span class="o">:</span><span class="mi">188</span><span class="p">,</span><span class="nx">COMMAND</span><span class="o">:</span><span class="mi">91</span><span class="p">,</span><span class="nx">COMMAND_LEFT</span><span class="o">:</span><span class="mi">91</span><span class="p">,</span><span class="nx">COMMAND_RIGHT</span><span class="o">:</span><span class="mi">93</span><span class="p">,</span><span class="nx">CONTROL</span><span class="o">:</span><span class="mi">17</span><span class="p">,</span><span class="nx">DELETE</span><span class="o">:</span><span class="mi">46</span><span class="p">,</span><span class="nx">DOWN</span><span class="o">:</span><span class="mi">40</span><span class="p">,</span><span class="nx">END</span><span class="o">:</span><span class="mi">35</span><span class="p">,</span><span class="nx">ENTER</span><span class="o">:</span><span class="mi">13</span><span class="p">,</span><span class="nx">ESCAPE</span><span class="o">:</span><span class="mi">27</span><span class="p">,</span><span class="nx">HOME</span><span class="o">:</span><span class="mi">36</span><span class="p">,</span><span class="nx">INSERT</span><span class="o">:</span><span class="mi">45</span><span class="p">,</span><span class="nx">LEFT</span><span class="o">:</span><span class="mi">37</span><span class="p">,</span><span class="nx">MENU</span><span class="o">:</span><span class="mi">93</span><span class="p">,</span><span class="nx">NUMPAD_ADD</span><span class="o">:</span><span class="mi">107</span><span class="p">,</span><span class="nx">NUMPAD_DECIMAL</span><span class="o">:</span><span class="mi">110</span><span class="p">,</span></div><div class='line' id='LC62'><span class="nx">NUMPAD_DIVIDE</span><span class="o">:</span><span class="mi">111</span><span class="p">,</span><span class="nx">NUMPAD_ENTER</span><span class="o">:</span><span class="mi">108</span><span class="p">,</span><span class="nx">NUMPAD_MULTIPLY</span><span class="o">:</span><span class="mi">106</span><span class="p">,</span><span class="nx">NUMPAD_SUBTRACT</span><span class="o">:</span><span class="mi">109</span><span class="p">,</span><span class="nx">PAGE_DOWN</span><span class="o">:</span><span class="mi">34</span><span class="p">,</span><span class="nx">PAGE_UP</span><span class="o">:</span><span class="mi">33</span><span class="p">,</span><span class="nx">PERIOD</span><span class="o">:</span><span class="mi">190</span><span class="p">,</span><span class="nx">RIGHT</span><span class="o">:</span><span class="mi">39</span><span class="p">,</span><span class="nx">SHIFT</span><span class="o">:</span><span class="mi">16</span><span class="p">,</span><span class="nx">SPACE</span><span class="o">:</span><span class="mi">32</span><span class="p">,</span><span class="nx">TAB</span><span class="o">:</span><span class="mi">9</span><span class="p">,</span><span class="nx">UP</span><span class="o">:</span><span class="mi">38</span><span class="p">,</span><span class="nx">WINDOWS</span><span class="o">:</span><span class="mi">91</span><span class="p">},</span><span class="nx">ignorables</span><span class="o">:</span><span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">34</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="mi">37</span><span class="p">,</span><span class="mi">38</span><span class="p">,</span><span class="mi">39</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">45</span><span class="p">,</span><span class="mi">46</span><span class="p">,</span><span class="mi">93</span><span class="p">,</span><span class="mi">112</span><span class="p">,</span><span class="mi">113</span><span class="p">,</span><span class="mi">114</span><span class="p">,</span><span class="mi">115</span><span class="p">,</span><span class="mi">116</span><span class="p">,</span><span class="mi">117</span><span class="p">,</span><span class="mi">118</span><span class="p">,</span><span class="mi">119</span><span class="p">,</span><span class="mi">120</span><span class="p">,</span><span class="mi">121</span><span class="p">,</span><span class="mi">122</span><span class="p">,</span><span class="mi">123</span><span class="p">],</span><span class="nx">isComplete</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">},</span><span class="nx">masksCache</span><span class="o">:</span><span class="p">{},</span><span class="nx">escapeRegex</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;(\\/|\\.|\\*|\\+|\\?|\\||\\(|\\)|\\[|\\]|\\{|\\}|\\\\)&quot;</span><span class="p">,</span><span class="s2">&quot;gim&quot;</span><span class="p">),</span><span class="s2">&quot;\\$1&quot;</span><span class="p">)},</span><span class="nx">format</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,{},</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">defaults</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">alias</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span></div><div class='line' id='LC63'><span class="k">return</span> <span class="nx">F</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="s2">&quot;format&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">a</span><span class="p">},</span><span class="nx">e</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">d</span><span class="p">)},</span><span class="nx">isValid</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,{},</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">defaults</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">alias</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="k">return</span> <span class="nx">F</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="s2">&quot;isValid&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">a</span><span class="p">},</span><span class="nx">e</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">d</span><span class="p">)}};</span><span class="nx">f</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">inputmask</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="kd">function</span> <span class="nx">u</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">e</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span> <span class="k">in</span> <span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;inputmask-&quot;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">());</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">)}</span><span class="k">return</span> <span class="nx">b</span><span class="p">}</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="nx">F</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">k</span><span class="o">||</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,{},</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">defaults</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">n</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;mask&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">alias</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">d</span><span class="o">!==</span><span class="nx">F</span><span class="p">),</span><span class="mi">0</span><span class="o">==</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="k">this</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="s2">&quot;mask&quot;</span><span class="p">,</span></div><div class='line' id='LC64'><span class="nx">el</span><span class="o">:</span><span class="k">this</span><span class="p">},</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,{},</span><span class="nx">n</span><span class="p">),</span><span class="nx">u</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">h</span><span class="p">))});</span><span class="k">case</span> <span class="s2">&quot;unmaskedvalue&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span><span class="o">?</span><span class="nx">d</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="s2">&quot;unmaskedvalue&quot;</span><span class="p">,</span><span class="nx">$input</span><span class="o">:</span><span class="nx">a</span><span class="p">})</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span><span class="k">case</span> <span class="s2">&quot;remove&quot;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="s2">&quot;remove&quot;</span><span class="p">,</span><span class="nx">el</span><span class="o">:</span><span class="k">this</span><span class="p">})});</span><span class="k">case</span> <span class="s2">&quot;getemptymask&quot;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span><span class="o">?</span><span class="nx">d</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="s2">&quot;getemptymask&quot;</span><span class="p">,</span><span class="nx">el</span><span class="o">:</span><span class="k">this</span><span class="p">})</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;hasMaskedValue&quot;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span><span class="o">?!</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">k</span><span class="p">).</span><span class="nx">opts</span><span class="p">.</span><span class="nx">autoUnmask</span><span class="o">:!</span><span class="mi">1</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;isComplete&quot;</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span><span class="o">?</span><span class="nx">d</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="s2">&quot;isComplete&quot;</span><span class="p">,</span><span class="nx">buffer</span><span class="o">:</span><span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">_valueGet</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">el</span><span class="o">:</span><span class="k">this</span><span class="p">})</span><span class="o">:!</span><span class="mi">0</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;getmetadata&quot;</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">k</span><span class="p">))</span><span class="k">return</span> <span class="nx">n</span><span class="o">=</span></div><div class='line' id='LC65'><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="nx">k</span><span class="p">).</span><span class="nx">maskset</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">metadata</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;_detectScope&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">alias</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">g</span><span class="o">||</span><span class="nx">b</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">)</span><span class="o">||-</span><span class="mi">1</span><span class="o">!=</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="s2">&quot;mask unmaskedvalue remove getemptymask hasMaskedValue isComplete getmetadata _detectScope&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">))</span><span class="o">||</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">mask</span><span class="o">=</span><span class="nx">g</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">mask</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">mask</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">h</span><span class="p">)),</span><span class="nx">f</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">mask</span><span class="p">);</span><span class="k">default</span><span class="o">:</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">alias</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">mask</span><span class="o">=</span><span class="nx">a</span><span class="p">),</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">d</span><span class="o">!==</span><span class="nx">F</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">n</span><span class="o">?</span><span class="k">this</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="s2">&quot;mask&quot;</span><span class="p">,</span><span class="nx">el</span><span class="o">:</span><span class="k">this</span><span class="p">},</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,{},</span><span class="nx">n</span><span class="p">),</span><span class="nx">u</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">h</span><span class="p">))})}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;object&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span></div><div class='line' id='LC66'><span class="p">{},</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">defaults</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">alias</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">d</span><span class="o">!==</span><span class="nx">F</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">n</span><span class="o">?</span><span class="k">this</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">d</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="s2">&quot;mask&quot;</span><span class="p">,</span><span class="nx">el</span><span class="o">:</span><span class="k">this</span><span class="p">},</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,{},</span><span class="nx">n</span><span class="p">),</span><span class="nx">u</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">h</span><span class="p">))});</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;data-inputmask&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;&quot;</span><span class="o">!=</span><span class="nx">a</span><span class="p">)</span><span class="k">try</span><span class="p">{</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;&#39;&quot;</span><span class="p">,</span><span class="s2">&quot;g&quot;</span><span class="p">),</span><span class="s1">&#39;&quot;&#39;</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">parseJSON</span><span class="p">(</span><span class="s2">&quot;{&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;}&quot;</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">,{},</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">defaults</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">alias</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">alias</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">inputmask</span><span class="p">(</span><span class="s2">&quot;mask&quot;</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">d</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">k</span><span class="p">){}})}}}});</span></div><div class='line' id='LC67'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;jquery.inputmask-multi&quot;</span><span class="p">,[</span><span class="s2">&quot;jquery&quot;</span><span class="p">,</span><span class="s2">&quot;jquery.inputmask&quot;</span><span class="p">],</span><span class="nx">f</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">)})(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">f</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="s2">&quot;on&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span> <span class="k">in</span> <span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;return;&quot;</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="s2">&quot;function&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">]);</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="kd">function</span> <span class="nx">k</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">||!</span><span class="mi">0</span><span class="o">!=</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">inputmaskmultipatch</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">get</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="p">},</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">&amp;&amp;</span></div><div class='line' id='LC68'><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">set</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">f</span><span class="p">.</span><span class="nx">valHooks</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask-multi&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask-multi&quot;</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">elmasks</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">activeMasksetIndex</span><span class="p">]))</span><span class="o">:</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask-multi&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="s2">&quot;setvalue&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="nx">inputmaskmultipatch</span><span class="o">:!</span><span class="mi">0</span><span class="p">}}}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">jquery</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;number&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">y</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">y</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="s2">&quot;number&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">b</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">!=</span><span class="nx">l</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">)</span><span class="o">||</span><span class="p">{};</span></div><div class='line' id='LC69'><span class="nx">e</span><span class="p">.</span><span class="nx">caret</span><span class="o">=</span><span class="p">{</span><span class="nx">begin</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="nx">c</span><span class="p">};</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">)}</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="s2">&quot;:visible&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">scrollLeft</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">scrollWidth</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">insertMode</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">++</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">setSelectionRange</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">selectionStart</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">selectionEnd</span><span class="o">=</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">createTextRange</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">createTextRange</span><span class="p">(),</span><span class="nx">a</span><span class="p">.</span><span class="nx">collapse</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">moveEnd</span><span class="p">(</span><span class="s2">&quot;character&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">moveStart</span><span class="p">(</span><span class="s2">&quot;character&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">select</span><span class="p">()))}</span><span class="k">else</span> <span class="k">return</span> <span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">),</span><span class="o">!</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">is</span><span class="p">(</span><span class="s2">&quot;:visible&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">e</span><span class="p">.</span><span class="nx">caret</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">caret</span><span class="p">.</span><span class="nx">begin</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">caret</span><span class="p">.</span><span class="nx">end</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">setSelectionRange</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">selectionStart</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">selectionEnd</span><span class="p">)</span><span class="o">:</span><span class="nb">document</span><span class="p">.</span><span class="nx">selection</span><span class="o">&amp;&amp;</span><span class="nb">document</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">createRange</span><span class="o">&amp;&amp;</span></div><div class='line' id='LC70'><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">selection</span><span class="p">.</span><span class="nx">createRange</span><span class="p">(),</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">duplicate</span><span class="p">().</span><span class="nx">moveStart</span><span class="p">(</span><span class="s2">&quot;character&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="nx">E5</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">y</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">y</span><span class="p">(</span><span class="nx">c</span><span class="p">),{</span><span class="nx">begin</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="nx">c</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">y</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="o">!</span><span class="nx">F</span><span class="o">||</span><span class="s2">&quot;number&quot;</span><span class="o">!=</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">greedy</span><span class="o">&amp;&amp;</span><span class="s2">&quot;&quot;</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">placeholder</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">u</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;multiMaskScope&quot;</span><span class="o">!=</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">isFunction</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">determineActiveMasksetIndex</span><span class="p">))</span><span class="nx">v</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">determineActiveMasksetIndex</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">k</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">).</span><span class="nx">maskset</span><span class="p">,</span><span class="nx">h</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">begin</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span> <span class="k">in</span> <span class="nx">d</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">n</span><span class="p">),</span></div><div class='line' id='LC71'><span class="nx">d</span><span class="o">&gt;</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">),</span><span class="nx">m</span><span class="o">++</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="o">&gt;</span><span class="nx">c</span><span class="o">||</span><span class="nx">m</span><span class="o">==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="o">&gt;</span><span class="nx">h</span><span class="o">||</span><span class="nx">m</span><span class="o">==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">==</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">m</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">h</span><span class="p">})}</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask-multi&quot;</span><span class="p">)</span><span class="o">||</span><span class="p">{</span><span class="nx">activeMasksetIndex</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">elmasks</span><span class="o">:</span><span class="nx">b</span><span class="p">};</span><span class="nx">q</span><span class="p">.</span><span class="nx">activeMasksetIndex</span><span class="o">=</span><span class="nx">v</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask-multi&quot;</span><span class="p">,</span><span class="nx">q</span><span class="p">)}</span><span class="o">-</span><span class="mi">1</span><span class="o">==</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">a</span><span class="p">,[</span><span class="s2">&quot;focus&quot;</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">.</span><span class="nx">value</span><span class="o">!=</span><span class="nx">b</span><span class="p">[</span><span class="nx">v</span><span class="p">].</span><span class="nx">_valueGet</span><span class="p">()</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">q</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">==</span><span class="nx">f</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">v</span><span class="p">]).</span><span class="nx">val</span><span class="p">()</span><span class="o">?</span><span class="nx">b</span><span class="p">[</span><span class="nx">v</span><span class="p">].</span><span class="nx">_valueGet</span><span class="p">()</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">v</span><span class="p">]).</span><span class="nx">val</span><span class="p">(),</span><span class="nx">l</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">q</span><span class="p">);</span><span class="o">-</span><span class="mi">1</span><span class="o">==</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">a</span><span class="p">,[</span><span class="s2">&quot;blur&quot;</span><span class="p">,</span><span class="s2">&quot;focus&quot;</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">v</span><span class="p">]).</span><span class="nx">hasClass</span><span class="p">(</span><span class="s2">&quot;focus-inputmask&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">q</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">v</span><span class="p">]),</span><span class="nx">g</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">begin</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">end</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">L</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="nx">F</span><span class="o">=</span><span class="s2">&quot;rtl&quot;</span><span class="o">==</span><span class="nx">l</span><span class="p">.</span><span class="nx">dir</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">numericInput</span><span class="p">;</span><span class="nx">v</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">w</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span></div><div class='line' id='LC72'><span class="s1">&#39;&lt;input type=&quot;text&quot; &#39;</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">+=</span><span class="s1">&#39;value=&quot;&#39;</span><span class="o">+</span><span class="nx">m</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&quot; &#39;</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;dir&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">+=</span><span class="s1">&#39;dir=&quot;&#39;</span><span class="o">+</span><span class="nx">m</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;dir&quot;</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&quot; &#39;</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="s2">&quot;/&gt;&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span><span class="nx">f</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">inputmask</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span><span class="nx">d</span><span class="p">,{</span><span class="nx">mask</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">mask</span><span class="p">}));</span><span class="k">return</span> <span class="nx">c</span><span class="p">});</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask-multi&quot;</span><span class="p">,{</span><span class="nx">activeMasksetIndex</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">elmasks</span><span class="o">:</span><span class="nx">w</span><span class="p">});(</span><span class="s2">&quot;rtl&quot;</span><span class="o">==</span><span class="nx">l</span><span class="p">.</span><span class="nx">dir</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">rightAlign</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">&quot;text-align&quot;</span><span class="p">,</span><span class="s2">&quot;right&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">dir</span><span class="o">=</span><span class="s2">&quot;ltr&quot;</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s2">&quot;dir&quot;</span><span class="p">);</span><span class="s2">&quot;&quot;</span><span class="o">!=</span><span class="nx">m</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">u</span><span class="p">(</span><span class="s2">&quot;init&quot;</span><span class="p">,</span><span class="nx">w</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;mouseenter blur focus mouseleave click dblclick keydown keypress keypress&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;keydown&quot;</span><span class="o">==</span></div><div class='line' id='LC73'><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">DOWN</span><span class="o">&amp;&amp;</span><span class="nx">v</span><span class="o">&lt;</span><span class="nx">w</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span> <span class="nx">v</span><span class="o">++</span><span class="p">,</span><span class="nx">u</span><span class="p">(</span><span class="s2">&quot;multiMaskScope&quot;</span><span class="p">,</span><span class="nx">w</span><span class="p">),</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">UP</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">v</span><span class="p">)</span><span class="k">return</span> <span class="nx">v</span><span class="o">--</span><span class="p">,</span><span class="nx">u</span><span class="p">(</span><span class="s2">&quot;multiMaskScope&quot;</span><span class="p">,</span><span class="nx">w</span><span class="p">),</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">ctrlKey</span><span class="o">||</span><span class="nx">c</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">SHIFT</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">altKey</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;keypress&quot;</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">ctrlKey</span><span class="o">||</span><span class="nx">c</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">SHIFT</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">altKey</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;keydown&quot;</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">BACKSPACE</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">().</span><span class="nx">length</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="p">)</span><span class="k">return</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">TAB</span><span class="p">)</span><span class="nx">e</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">RIGHT</span><span class="p">){</span><span class="nx">g</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">end</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span><span class="nx">e</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">LEFT</span><span class="p">){</span><span class="nx">g</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span></div><div class='line' id='LC74'><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">end</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">e</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span><span class="p">}}}</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">!=</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,[</span><span class="s2">&quot;click&quot;</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">y</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="p">),</span><span class="nx">y</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">end</span><span class="p">)),</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="o">!=</span><span class="nx">b</span><span class="p">.</span><span class="nx">end</span><span class="p">)){</span><span class="nx">e</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span><span class="p">}</span><span class="o">-</span><span class="mi">1</span><span class="o">!=</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,[</span><span class="s2">&quot;keydown&quot;</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="o">!=</span><span class="nx">b</span><span class="p">.</span><span class="nx">end</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">begin</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">end</span><span class="p">);</span><span class="nx">f</span><span class="p">(</span><span class="nx">h</span><span class="p">).</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="nx">a</span><span class="p">)});</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">u</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="nx">w</span><span class="p">)},</span><span class="mi">0</span><span class="p">)});</span><span class="nx">m</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">M</span><span class="o">+</span><span class="s2">&quot; dragdrop drop setvalue&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">g</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">f</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span><span class="nx">f</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="nx">a</span><span class="p">)});</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">u</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="nx">w</span><span class="p">)},</span><span class="mi">0</span><span class="p">)},</span><span class="mi">0</span><span class="p">)});</span><span class="nx">k</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">type</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">M</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;paste&quot;</span><span class="p">)</span><span class="o">?</span><span class="s2">&quot;paste&quot;</span><span class="o">:</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;input&quot;</span><span class="p">)</span><span class="o">?</span><span class="s2">&quot;input&quot;</span><span class="o">:</span></div><div class='line' id='LC75'><span class="s2">&quot;propertychange&quot;</span><span class="p">,</span><span class="nx">F</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">w</span><span class="p">,</span><span class="nx">v</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">multi</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">a</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">action</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;isComplete&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">m</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">el</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask-multi&quot;</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elmasks</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">activeMasksetIndex</span><span class="p">],</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">inputmask</span><span class="p">(</span><span class="s2">&quot;isComplete&quot;</span><span class="p">);</span><span class="k">case</span> <span class="s2">&quot;unmaskedvalue&quot;</span><span class="o">:</span><span class="k">return</span> <span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">$input</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask-multi&quot;</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elmasks</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">activeMasksetIndex</span><span class="p">],</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">inputmask</span><span class="p">(</span><span class="s2">&quot;unmaskedvalue&quot;</span><span class="p">);</span><span class="k">case</span> <span class="s2">&quot;mask&quot;</span><span class="o">:</span><span class="nx">L</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">el</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;remove&quot;</span><span class="o">:</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">el</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="nx">maskset</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">).</span><span class="nx">maskset</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">).</span><span class="nx">opts</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">(</span><span class="nx">unmaskedvalue</span><span class="p">(</span><span class="nx">m</span><span class="p">));</span><span class="nx">m</span><span class="p">.</span><span class="nx">unbind</span><span class="p">(</span><span class="s2">&quot;.inputmask&quot;</span><span class="p">);</span></div><div class='line' id='LC76'><span class="nx">m</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s2">&quot;focus-inputmask&quot;</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">removeData</span><span class="p">(</span><span class="s2">&quot;_inputmask&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">q</span><span class="p">;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">q</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="p">));</span><span class="nx">q</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="p">.</span><span class="nx">get</span><span class="o">?</span><span class="nx">l</span><span class="p">.</span><span class="nx">_valueGet</span><span class="o">&amp;&amp;</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="s2">&quot;value&quot;</span><span class="p">,{</span><span class="nx">get</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">})</span><span class="o">:</span><span class="nb">document</span><span class="p">.</span><span class="nx">__lookupGetter__</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">.</span><span class="nx">__lookupGetter__</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">l</span><span class="p">.</span><span class="nx">_valueGet</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">__defineGetter__</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">),</span><span class="nx">l</span><span class="p">.</span><span class="nx">__defineSetter__</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">));</span><span class="k">try</span><span class="p">{</span><span class="k">delete</span> <span class="nx">l</span><span class="p">.</span><span class="nx">_valueGet</span><span class="p">,</span><span class="k">delete</span> <span class="nx">l</span><span class="p">.</span><span class="nx">_valueSet</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">C</span><span class="p">){</span><span class="nx">l</span><span class="p">.</span><span class="nx">_valueGet</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">_valueSet</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">}}};</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">defaults</span><span class="p">,</span></div><div class='line' id='LC77'><span class="p">{</span><span class="nx">multi</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">determineActiveMasksetIndex</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">});</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">_fn</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">inputmask</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">_fn</span><span class="p">(</span><span class="s2">&quot;_detectScope&quot;</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">_fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;_inputmask-multi&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">_fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;object&quot;</span><span class="o">==</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">_fn</span><span class="p">(</span><span class="s2">&quot;_detectScope&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">_fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="s2">&quot;_inputmask-multi&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">_fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">_fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">)}}});</span></div><div class='line' id='LC78'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;jquery.inputmask.extensions&quot;</span><span class="p">,[</span><span class="s2">&quot;jquery&quot;</span><span class="p">,</span><span class="s2">&quot;jquery.inputmask&quot;</span><span class="p">],</span><span class="nx">f</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">)})(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">definitions</span><span class="p">,{</span><span class="nx">A</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[A-Za-z]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">casing</span><span class="o">:</span><span class="s2">&quot;upper&quot;</span><span class="p">},</span><span class="s2">&quot;#&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[A-Za-z\u0410-\u044f\u0401\u04510-9]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">casing</span><span class="o">:</span><span class="s2">&quot;upper&quot;</span><span class="p">}});</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">aliases</span><span class="p">,{</span><span class="nx">url</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;ir&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">separator</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">defaultPrefix</span><span class="o">:</span><span class="s2">&quot;http://&quot;</span><span class="p">,</span><span class="nx">regex</span><span class="o">:</span><span class="p">{</span><span class="nx">urlpre1</span><span class="o">:</span><span class="sr">/[fh]/</span><span class="p">,</span><span class="nx">urlpre2</span><span class="o">:</span><span class="sr">/(ft|ht)/</span><span class="p">,</span><span class="nx">urlpre3</span><span class="o">:</span><span class="sr">/(ftp|htt)/</span><span class="p">,</span><span class="nx">urlpre4</span><span class="o">:</span><span class="sr">/(ftp:|http|ftps)/</span><span class="p">,</span></div><div class='line' id='LC79'><span class="nx">urlpre5</span><span class="o">:</span><span class="sr">/(ftp:\/|ftps:|http:|https)/</span><span class="p">,</span><span class="nx">urlpre6</span><span class="o">:</span><span class="sr">/(ftp:\/\/|ftps:\/|http:\/|https:)/</span><span class="p">,</span><span class="nx">urlpre7</span><span class="o">:</span><span class="sr">/(ftp:\/\/|ftps:\/\/|http:\/\/|https:\/)/</span><span class="p">,</span><span class="nx">urlpre8</span><span class="o">:</span><span class="sr">/(ftp:\/\/|ftps:\/\/|http:\/\/|https:\/\/)/</span><span class="p">},</span><span class="nx">definitions</span><span class="o">:</span><span class="p">{</span><span class="nx">i</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">8</span><span class="p">,</span><span class="nx">prevalidator</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">8</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">regex</span><span class="p">[</span><span class="s2">&quot;urlpre&quot;</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)]){</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">u</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;&quot;</span><span class="o">+</span><span class="nx">u</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">regex</span><span class="p">[</span><span class="s2">&quot;urlpre&quot;</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)].</span><span class="nx">test</span><span class="p">(</span><span class="nx">u</span><span class="p">);</span></div><div class='line' id='LC80'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">g</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">){</span><span class="nx">f</span><span class="o">-=</span><span class="nx">a</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">y</span><span class="p">.</span><span class="nx">defaultPrefix</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">defaultPrefix</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">f</span><span class="o">++</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">u</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">f</span><span class="o">++</span><span class="p">;</span><span class="k">return</span><span class="p">{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">f</span><span class="p">}}</span><span class="k">return</span> <span class="nx">b</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">},</span><span class="nx">cardinality</span><span class="o">:</span><span class="nx">a</span><span class="p">}}();</span><span class="k">return</span> <span class="nx">a</span><span class="p">}()},</span><span class="nx">r</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;.&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">50</span><span class="p">}},</span><span class="nx">insertMode</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">autoUnmask</span><span class="o">:!</span><span class="mi">1</span><span class="p">},</span><span class="nx">ip</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;i[i[i]].i[i[i]].i[i[i]].i[i[i]]&quot;</span><span class="p">,</span><span class="nx">definitions</span><span class="o">:</span><span class="p">{</span><span class="nx">i</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="o">-</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="s2">&quot;.&quot;</span><span class="o">!=</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="o">=-</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">e</span><span class="o">-</span><span class="mi">2</span><span class="o">&amp;&amp;</span><span class="s2">&quot;.&quot;</span><span class="o">!=</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="o">:</span><span class="s2">&quot;0&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="o">=</span><span class="s2">&quot;00&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span><span class="sr">/25[0-5]|2[0-4][0-9]|[01][0-9][0-9]/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span></div><div class='line' id='LC81'><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">}}},</span><span class="nx">email</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;*{1,20}[.*{1,20}][.*{1,20}][.*{1,20}]@*{1,20}.*{2,6}[.*{1,2}]&quot;</span><span class="p">,</span><span class="nx">greedy</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">onBeforePaste</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;mailto:&quot;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)},</span><span class="nx">definitions</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;*&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[A-Za-z\u0410-\u044f\u0401\u04510-9!#$%&amp;&#39;*+/=?^_`{|}~-]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">casing</span><span class="o">:</span><span class="s2">&quot;lower&quot;</span><span class="p">}}}})});</span></div><div class='line' id='LC82'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;jquery.inputmask.date.extensions&quot;</span><span class="p">,[</span><span class="s2">&quot;jquery&quot;</span><span class="p">,</span><span class="s2">&quot;jquery.inputmask&quot;</span><span class="p">],</span><span class="nx">f</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">)})(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">definitions</span><span class="p">,{</span><span class="nx">h</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[01][0-9]|2[0-3]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">prevalidator</span><span class="o">:</span><span class="p">[{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[0-2]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">}]},</span><span class="nx">s</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[0-5][0-9]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">prevalidator</span><span class="o">:</span><span class="p">[{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[0-5]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">}]},</span><span class="nx">d</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;0[1-9]|[12][0-9]|3[01]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">prevalidator</span><span class="o">:</span><span class="p">[{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[0-3]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">}]},</span><span class="nx">m</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;0[1-9]|1[012]&quot;</span><span class="p">,</span></div><div class='line' id='LC83'><span class="nx">cardinality</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">prevalidator</span><span class="o">:</span><span class="p">[{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[01]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">}]},</span><span class="nx">y</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;(19|20)\\d{2}&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">4</span><span class="p">,</span><span class="nx">prevalidator</span><span class="o">:</span><span class="p">[{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[12]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">},{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;(19|20)&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">2</span><span class="p">},{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;(19|20)\\d&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">3</span><span class="p">}]}});</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">aliases</span><span class="p">,{</span><span class="s2">&quot;dd/mm/yyyy&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;1/2/y&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;dd/mm/yyyy&quot;</span><span class="p">,</span><span class="nx">regex</span><span class="o">:</span><span class="p">{</span><span class="nx">val1pre</span><span class="o">:</span><span class="sr">/[0-3]/</span><span class="p">,</span><span class="nx">val1</span><span class="o">:</span><span class="sr">/0[1-9]|[12][0-9]|3[01]/</span><span class="p">,</span><span class="nx">val2pre</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">escapeRegex</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;((0[1-9]|[12][0-9]|3[01])&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;[01])&quot;</span><span class="p">)},</span><span class="nx">val2</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span></div><div class='line' id='LC84'><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">escapeRegex</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;((0[1-9]|[12][0-9])&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;(0[1-9]|1[012]))|(30&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;(0[13-9]|1[012]))|(31&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;(0[13578]|1[02]))&quot;</span><span class="p">)}},</span><span class="nx">leapday</span><span class="o">:</span><span class="s2">&quot;29/02/&quot;</span><span class="p">,</span><span class="nx">separator</span><span class="o">:</span><span class="s2">&quot;/&quot;</span><span class="p">,</span><span class="nx">yearrange</span><span class="o">:</span><span class="p">{</span><span class="nx">minyear</span><span class="o">:</span><span class="mi">1900</span><span class="p">,</span><span class="nx">maxyear</span><span class="o">:</span><span class="mi">2099</span><span class="p">},</span><span class="nx">isInYearRange</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">slice</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)));</span><span class="nx">a</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">slice</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)));</span><span class="k">return</span><span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">?!</span><span class="mi">1</span><span class="o">:</span><span class="nx">b</span><span class="o">&lt;=</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="o">&lt;=</span><span class="nx">e</span><span class="p">)</span><span class="o">||</span><span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">?!</span><span class="mi">1</span><span class="o">:</span><span class="nx">b</span><span class="o">&lt;=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">&lt;=</span><span class="nx">e</span><span class="p">)},</span><span class="nx">determinebaseyear</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">).</span><span class="nx">getFullYear</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;</span></div><div class='line' id='LC85'><span class="nx">d</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">d</span><span class="o">+</span><span class="nx">e</span><span class="p">;)</span><span class="nx">d</span><span class="o">--</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">b</span><span class="p">}</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="nx">onKeyUp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">ctrlKey</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">RIGHT</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nb">Date</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getDate</span><span class="p">().</span><span class="nx">toString</span><span class="p">()</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">()</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">().</span><span class="nx">toString</span><span class="p">()))},</span><span class="nx">definitions</span><span class="o">:</span><span class="p">{</span><span class="mi">1</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">val1</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="o">||</span><span class="nx">f</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">!=</span><span class="nx">c</span><span class="p">.</span><span class="nx">separator</span><span class="o">&amp;&amp;-</span><span class="mi">1</span><span class="o">==</span><span class="s2">&quot;-./&quot;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span><span class="o">||!</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">val1</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;0&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;0&quot;</span><span class="p">,{</span><span class="nx">refreshFromBuffer</span><span class="o">:</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="nx">e</span><span class="o">-</span></div><div class='line' id='LC86'><span class="mi">1</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="nx">e</span><span class="p">},</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)})},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">prevalidator</span><span class="o">:</span><span class="p">[{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">+=</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">val1pre</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">val1</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="o">||</span><span class="nx">f</span><span class="o">||!</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">val1</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;0&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">))</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;0&quot;</span><span class="p">,</span><span class="nx">e</span><span class="o">++</span><span class="p">,{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">})},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">}]},</span><span class="mi">2</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">substr</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span><span class="o">-</span><span class="mi">1</span><span class="o">!=</span><span class="nx">f</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="s2">&quot;01&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">separator</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">val2</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">separator</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span></div><div class='line' id='LC87'><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">d</span><span class="o">||</span><span class="nx">g</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">!=</span><span class="nx">c</span><span class="p">.</span><span class="nx">separator</span><span class="o">&amp;&amp;-</span><span class="mi">1</span><span class="o">==</span><span class="s2">&quot;-./&quot;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">val2</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">separator</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="s2">&quot;0&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">))))</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;0&quot;</span><span class="p">,{</span><span class="nx">refreshFromBuffer</span><span class="o">:</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="nx">e</span><span class="p">},</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)};</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">substr</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="o">!=</span><span class="nx">c</span><span class="p">.</span><span class="nx">leapday</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span><span class="mi">10</span><span class="p">);</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">%</span><span class="mi">4</span><span class="o">?</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">%</span><span class="mi">100</span><span class="o">?</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">%</span><span class="mi">400</span><span class="o">?!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="o">:!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span> <span class="nx">g</span><span class="p">},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">prevalidator</span><span class="o">:</span><span class="p">[{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">+=</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">+</span></div><div class='line' id='LC88'><span class="mi">1</span><span class="p">]);</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">mask</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">substr</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span><span class="o">-</span><span class="mi">1</span><span class="o">!=</span><span class="nx">f</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">placeholder</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="s2">&quot;01&quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">separator</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="mi">1</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">val2pre</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">separator</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">val2</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">separator</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="o">||</span><span class="nx">g</span><span class="o">||!</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">val2</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">separator</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="s2">&quot;0&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">))</span><span class="o">?</span><span class="nx">g</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;0&quot;</span><span class="p">,</span><span class="nx">e</span><span class="o">++</span><span class="p">,{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">})},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">}]},</span><span class="nx">y</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">isInYearRange</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">minyear</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">maxyear</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">!=</span><span class="nx">c</span><span class="p">.</span><span class="nx">leapday</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span></div><div class='line' id='LC89'><span class="nx">a</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">%</span><span class="mi">4</span><span class="o">?</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">%</span><span class="mi">100</span><span class="o">?</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">%</span><span class="mi">400</span><span class="o">?!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="o">:!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">4</span><span class="p">,</span><span class="nx">prevalidator</span><span class="o">:</span><span class="p">[{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">isInYearRange</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">minyear</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">maxyear</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">d</span><span class="o">&amp;&amp;!</span><span class="nx">f</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">determinebaseyear</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">minyear</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">maxyear</span><span class="p">,</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;0&quot;</span><span class="p">).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">isInYearRange</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">minyear</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">maxyear</span><span class="p">))</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">};</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">determinebaseyear</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">minyear</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">maxyear</span><span class="p">,</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;0&quot;</span><span class="p">).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">isInYearRange</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span></div><div class='line' id='LC90'><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">minyear</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">maxyear</span><span class="p">))</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">],{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">}}</span><span class="k">return</span> <span class="nx">f</span><span class="p">},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">},{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">isInYearRange</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">minyear</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">maxyear</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">d</span><span class="o">&amp;&amp;!</span><span class="nx">f</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">determinebaseyear</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">minyear</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">maxyear</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">isInYearRange</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">minyear</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">maxyear</span><span class="p">))</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">],{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">};</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">determinebaseyear</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">minyear</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">maxyear</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">toString</span><span class="p">().</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span></div><div class='line' id='LC91'><span class="mi">2</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">isInYearRange</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">minyear</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">maxyear</span><span class="p">)</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span><span class="o">!=</span><span class="nx">c</span><span class="p">.</span><span class="nx">leapday</span><span class="o">?</span><span class="nx">f</span><span class="o">=!</span><span class="mi">0</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="o">%</span><span class="mi">4</span><span class="o">?</span><span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="o">%</span><span class="mi">100</span><span class="o">?</span><span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="o">%</span><span class="mi">400</span><span class="o">?!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="o">:!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],{</span><span class="nx">refreshFromBuffer</span><span class="o">:</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="nx">e</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="nx">e</span><span class="p">},</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">}}</span><span class="k">return</span> <span class="nx">f</span><span class="p">},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">2</span><span class="p">},{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">isInYearRange</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">minyear</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">yearrange</span><span class="p">.</span><span class="nx">maxyear</span><span class="p">)},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">3</span><span class="p">}]}},</span><span class="nx">insertMode</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">autoUnmask</span><span class="o">:!</span><span class="mi">1</span><span class="p">},</span><span class="s2">&quot;mm/dd/yyyy&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;mm/dd/yyyy&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;dd/mm/yyyy&quot;</span><span class="p">,</span></div><div class='line' id='LC92'><span class="nx">regex</span><span class="o">:</span><span class="p">{</span><span class="nx">val2pre</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">escapeRegex</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;((0[13-9]|1[012])&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;[0-3])|(02&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;[0-2])&quot;</span><span class="p">)},</span><span class="nx">val2</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">escapeRegex</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;((0[1-9]|1[012])&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;(0[1-9]|[12][0-9]))|((0[13-9]|1[012])&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;30)|((0[13578]|1[02])&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;31)&quot;</span><span class="p">)},</span><span class="nx">val1pre</span><span class="o">:</span><span class="sr">/[01]/</span><span class="p">,</span><span class="nx">val1</span><span class="o">:</span><span class="sr">/0[1-9]|1[012]/</span><span class="p">},</span><span class="nx">leapday</span><span class="o">:</span><span class="s2">&quot;02/29/&quot;</span><span class="p">,</span><span class="nx">onKeyUp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">ctrlKey</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">RIGHT</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nb">Date</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">val</span><span class="p">((</span><span class="nx">a</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">()</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">getDate</span><span class="p">().</span><span class="nx">toString</span><span class="p">()</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">().</span><span class="nx">toString</span><span class="p">()))}},</span></div><div class='line' id='LC93'><span class="s2">&quot;yyyy/mm/dd&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;y/1/2&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;yyyy/mm/dd&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;mm/dd/yyyy&quot;</span><span class="p">,</span><span class="nx">leapday</span><span class="o">:</span><span class="s2">&quot;/02/29&quot;</span><span class="p">,</span><span class="nx">onKeyUp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">ctrlKey</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">RIGHT</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nb">Date</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">().</span><span class="nx">toString</span><span class="p">()</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">()</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span><span class="nx">toString</span><span class="p">()</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">getDate</span><span class="p">().</span><span class="nx">toString</span><span class="p">()))}},</span><span class="s2">&quot;dd.mm.yyyy&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;1.2.y&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;dd.mm.yyyy&quot;</span><span class="p">,</span><span class="nx">leapday</span><span class="o">:</span><span class="s2">&quot;29.02.&quot;</span><span class="p">,</span><span class="nx">separator</span><span class="o">:</span><span class="s2">&quot;.&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;dd/mm/yyyy&quot;</span><span class="p">},</span><span class="s2">&quot;dd-mm-yyyy&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;1-2-y&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;dd-mm-yyyy&quot;</span><span class="p">,</span><span class="nx">leapday</span><span class="o">:</span><span class="s2">&quot;29-02-&quot;</span><span class="p">,</span><span class="nx">separator</span><span class="o">:</span><span class="s2">&quot;-&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;dd/mm/yyyy&quot;</span><span class="p">},</span><span class="s2">&quot;mm.dd.yyyy&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;1.2.y&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;mm.dd.yyyy&quot;</span><span class="p">,</span></div><div class='line' id='LC94'><span class="nx">leapday</span><span class="o">:</span><span class="s2">&quot;02.29.&quot;</span><span class="p">,</span><span class="nx">separator</span><span class="o">:</span><span class="s2">&quot;.&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;mm/dd/yyyy&quot;</span><span class="p">},</span><span class="s2">&quot;mm-dd-yyyy&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;1-2-y&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;mm-dd-yyyy&quot;</span><span class="p">,</span><span class="nx">leapday</span><span class="o">:</span><span class="s2">&quot;02-29-&quot;</span><span class="p">,</span><span class="nx">separator</span><span class="o">:</span><span class="s2">&quot;-&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;mm/dd/yyyy&quot;</span><span class="p">},</span><span class="s2">&quot;yyyy.mm.dd&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;y.1.2&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;yyyy.mm.dd&quot;</span><span class="p">,</span><span class="nx">leapday</span><span class="o">:</span><span class="s2">&quot;.02.29&quot;</span><span class="p">,</span><span class="nx">separator</span><span class="o">:</span><span class="s2">&quot;.&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;yyyy/mm/dd&quot;</span><span class="p">},</span><span class="s2">&quot;yyyy-mm-dd&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;y-1-2&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;yyyy-mm-dd&quot;</span><span class="p">,</span><span class="nx">leapday</span><span class="o">:</span><span class="s2">&quot;-02-29&quot;</span><span class="p">,</span><span class="nx">separator</span><span class="o">:</span><span class="s2">&quot;-&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;yyyy/mm/dd&quot;</span><span class="p">},</span><span class="nx">datetime</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;1/2/y h:s&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;dd/mm/yyyy hh:mm&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;dd/mm/yyyy&quot;</span><span class="p">,</span><span class="nx">regex</span><span class="o">:</span><span class="p">{</span><span class="nx">hrspre</span><span class="o">:</span><span class="sr">/[012]/</span><span class="p">,</span><span class="nx">hrs24</span><span class="o">:</span><span class="sr">/2[0-4]|1[3-9]/</span><span class="p">,</span><span class="nx">hrs</span><span class="o">:</span><span class="sr">/[01][0-9]|2[0-4]/</span><span class="p">,</span></div><div class='line' id='LC95'><span class="nx">ampm</span><span class="o">:</span><span class="sr">/^[a|p|A|P][m|M]/</span><span class="p">,</span><span class="nx">mspre</span><span class="o">:</span><span class="sr">/[0-5]/</span><span class="p">,</span><span class="nx">ms</span><span class="o">:</span><span class="sr">/[0-5][0-9]/</span><span class="p">},</span><span class="nx">timeseparator</span><span class="o">:</span><span class="s2">&quot;:&quot;</span><span class="p">,</span><span class="nx">hourFormat</span><span class="o">:</span><span class="s2">&quot;24&quot;</span><span class="p">,</span><span class="nx">definitions</span><span class="o">:</span><span class="p">{</span><span class="nx">h</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;24&quot;</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">hourFormat</span><span class="o">&amp;&amp;</span><span class="mi">24</span><span class="o">==</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;0&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;0&quot;</span><span class="p">,{</span><span class="nx">refreshFromBuffer</span><span class="o">:</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="nx">e</span><span class="p">},</span><span class="nx">c</span><span class="o">:</span><span class="s2">&quot;0&quot;</span><span class="p">};</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">hrs</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="o">||</span><span class="nx">f</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">!=</span><span class="nx">c</span><span class="p">.</span><span class="nx">timeseparator</span><span class="o">&amp;&amp;-</span><span class="mi">1</span><span class="o">==</span><span class="s2">&quot;-.:&quot;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span><span class="o">||!</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">hrs</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;0&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span><span class="o">?</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="s2">&quot;24&quot;</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">hourFormat</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">hrs24</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="mi">24</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="s2">&quot;a&quot;</span><span class="o">:</span><span class="s2">&quot;p&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">+</span></div><div class='line' id='LC96'><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;m&quot;</span><span class="p">,</span><span class="nx">a</span><span class="o">-=</span><span class="mi">12</span><span class="p">,</span><span class="mi">10</span><span class="o">&gt;</span><span class="nx">a</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;0&quot;</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)),{</span><span class="nx">refreshFromBuffer</span><span class="o">:</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="nx">e</span><span class="o">+</span><span class="mi">6</span><span class="p">},</span><span class="nx">c</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="p">]})</span><span class="o">:</span><span class="nx">f</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;0&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">e</span><span class="o">++</span><span class="p">,{</span><span class="nx">refreshFromBuffer</span><span class="o">:</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="nx">e</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="nx">e</span><span class="p">},</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">timeseparator</span><span class="p">})},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">prevalidator</span><span class="o">:</span><span class="p">[{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">hrspre</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="o">||</span><span class="nx">f</span><span class="o">||!</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">hrs</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;0&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">))</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;0&quot;</span><span class="p">,</span><span class="nx">e</span><span class="o">++</span><span class="p">,{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">})},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">}]},</span><span class="nx">s</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[0-5][0-9]&quot;</span><span class="p">,</span></div><div class='line' id='LC97'><span class="nx">cardinality</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">prevalidator</span><span class="o">:</span><span class="p">[{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">mspre</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="o">||</span><span class="nx">f</span><span class="o">||!</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">ms</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;0&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">))</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;0&quot;</span><span class="p">,</span><span class="nx">e</span><span class="o">++</span><span class="p">,{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">})},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">}]},</span><span class="nx">t</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">ampm</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;m&quot;</span><span class="p">)},</span><span class="nx">casing</span><span class="o">:</span><span class="s2">&quot;lower&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">}},</span><span class="nx">insertMode</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">autoUnmask</span><span class="o">:!</span><span class="mi">1</span><span class="p">},</span><span class="nx">datetime12</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;1/2/y h:s t\\m&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;dd/mm/yyyy hh:mm xm&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;datetime&quot;</span><span class="p">,</span><span class="nx">hourFormat</span><span class="o">:</span><span class="s2">&quot;12&quot;</span><span class="p">},</span><span class="s2">&quot;hh:mm t&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;h:s t\\m&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;hh:mm xm&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;datetime&quot;</span><span class="p">,</span><span class="nx">hourFormat</span><span class="o">:</span><span class="s2">&quot;12&quot;</span><span class="p">},</span><span class="s2">&quot;h:s t&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;h:s t\\m&quot;</span><span class="p">,</span></div><div class='line' id='LC98'><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;hh:mm xm&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;datetime&quot;</span><span class="p">,</span><span class="nx">hourFormat</span><span class="o">:</span><span class="s2">&quot;12&quot;</span><span class="p">},</span><span class="s2">&quot;hh:mm:ss&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;h:s:s&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;hh:mm:ss&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;datetime&quot;</span><span class="p">,</span><span class="nx">autoUnmask</span><span class="o">:!</span><span class="mi">1</span><span class="p">},</span><span class="s2">&quot;hh:mm&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;h:s&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;hh:mm&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;datetime&quot;</span><span class="p">,</span><span class="nx">autoUnmask</span><span class="o">:!</span><span class="mi">1</span><span class="p">},</span><span class="nx">date</span><span class="o">:</span><span class="p">{</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;dd/mm/yyyy&quot;</span><span class="p">},</span><span class="s2">&quot;mm/yyyy&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;1/y&quot;</span><span class="p">,</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;mm/yyyy&quot;</span><span class="p">,</span><span class="nx">leapday</span><span class="o">:</span><span class="s2">&quot;donotuse&quot;</span><span class="p">,</span><span class="nx">separator</span><span class="o">:</span><span class="s2">&quot;/&quot;</span><span class="p">,</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;mm/dd/yyyy&quot;</span><span class="p">}})});</span></div><div class='line' id='LC99'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;jquery.inputmask.numeric.extensions&quot;</span><span class="p">,[</span><span class="s2">&quot;jquery&quot;</span><span class="p">,</span><span class="s2">&quot;jquery.inputmask&quot;</span><span class="p">],</span><span class="nx">f</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">)})(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">aliases</span><span class="p">,{</span><span class="nx">numeric</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="o">&amp;&amp;</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">integerDigits</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">integerDigits</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">autoGroup</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">autoGroup</span><span class="o">&amp;&amp;</span><span class="s2">&quot;&quot;</span><span class="o">!=</span><span class="nx">a</span><span class="p">.</span><span class="nx">groupSeparator</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">autoGroup</span><span class="o">&amp;&amp;</span><span class="nb">isFinite</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">integerDigits</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">integerDigits</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">groupSize</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">integerDigits</span><span class="o">+=</span><span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">integerDigits</span><span class="o">%</span><span class="nx">a</span><span class="p">.</span><span class="nx">groupSize</span><span class="o">?</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">b</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nx">definitions</span><span class="p">[</span><span class="s2">&quot;:&quot;</span><span class="p">].</span><span class="nx">placeholder</span><span class="o">=</span></div><div class='line' id='LC100'><span class="nx">a</span><span class="p">.</span><span class="nx">radixPoint</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">prefix</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;[+]&quot;</span><span class="o">+</span><span class="p">(</span><span class="s2">&quot;~{1,&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">integerDigits</span><span class="o">+</span><span class="s2">&quot;}&quot;</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">a</span><span class="p">.</span><span class="nx">digits</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">digits</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="o">&lt;</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">digits</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">digitsOptional</span><span class="o">?</span><span class="nx">b</span><span class="o">+</span><span class="p">(</span><span class="s2">&quot;[:~{&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">digits</span><span class="o">+</span><span class="s2">&quot;}]&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="o">+</span><span class="p">(</span><span class="s2">&quot;:~{&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">digits</span><span class="o">+</span><span class="s2">&quot;}&quot;</span><span class="p">));</span><span class="k">return</span> <span class="nx">b</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">suffix</span><span class="p">},</span><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">greedy</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">digits</span><span class="o">:</span><span class="s2">&quot;*&quot;</span><span class="p">,</span><span class="nx">digitsOptional</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">groupSeparator</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">radixPoint</span><span class="o">:</span><span class="s2">&quot;.&quot;</span><span class="p">,</span><span class="nx">groupSize</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="nx">autoGroup</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">allowPlus</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">allowMinus</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">integerDigits</span><span class="o">:</span><span class="s2">&quot;+&quot;</span><span class="p">,</span><span class="nx">prefix</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">suffix</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">rightAlign</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">postFormat</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">groupSeparator</span><span class="o">||-</span><span class="mi">1</span><span class="o">!=</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">radixPoint</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span></div><div class='line' id='LC101'><span class="nx">b</span><span class="o">&gt;=</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">radixPoint</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">||</span><span class="sr">/[-+]/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">k</span><span class="p">))</span><span class="k">return</span><span class="p">{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">b</span><span class="p">};</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span><span class="nx">k</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">groupSeparator</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="o">--</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">k</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">b</span><span class="p">]);</span><span class="nx">e</span><span class="o">?</span><span class="nx">g</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;?&quot;</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;?&quot;</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">autoGroup</span><span class="o">||</span><span class="nx">e</span><span class="o">&amp;&amp;-</span><span class="mi">1</span><span class="o">!=</span><span class="nx">b</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">groupSeparator</span><span class="p">)){</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">escapeRegex</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">groupSeparator</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">groupSeparator</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nb">RegExp</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="s2">&quot;g&quot;</span><span class="p">),</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">radixPoint</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">!=</span><span class="nx">d</span><span class="p">.</span><span class="nx">prefix</span><span class="o">+</span><span class="s2">&quot;?0&quot;</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;=</span><span class="nx">d</span><span class="p">.</span><span class="nx">groupSize</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">prefix</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;([-+]?[\\d?]+)([\\d?]{&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">groupSize</span><span class="o">+</span><span class="s2">&quot;})&quot;</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">b</span><span class="p">);)</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span></div><div class='line' id='LC102'><span class="s2">&quot;$1&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">groupSeparator</span><span class="o">+</span><span class="s2">&quot;$2&quot;</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">groupSeparator</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">groupSeparator</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">groupSeparator</span><span class="p">);</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">+=</span><span class="nx">d</span><span class="p">.</span><span class="nx">radixPoint</span><span class="o">+</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">])}</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="s2">&quot;?&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">e</span><span class="o">?</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span><span class="p">{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">refreshFromBuffer</span><span class="o">:</span><span class="nx">c</span><span class="p">}},</span><span class="nx">onKeyDown</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">autoGroup</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">DELETE</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">keyCode</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">.</span><span class="nx">BACKSPACE</span><span class="p">))</span><span class="k">return</span> <span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">postFormat</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">caret</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">pos</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">},</span><span class="nx">onKeyPress</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">autoGroup</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">postFormat</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span></div><div class='line' id='LC103'><span class="nx">a</span><span class="p">.</span><span class="nx">caret</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">pos</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">},</span><span class="nx">regex</span><span class="o">:</span><span class="p">{</span><span class="nx">integerPart</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="sr">/[-+]?\d+/</span><span class="p">}},</span><span class="nx">negationhandler</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">allowMinus</span><span class="o">&amp;&amp;</span><span class="s2">&quot;-&quot;</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">match</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">integerPart</span><span class="p">(</span><span class="nx">c</span><span class="p">)),</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">?</span><span class="s2">&quot;+&quot;</span><span class="o">==</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span><span class="o">?</span><span class="p">{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">c</span><span class="o">:</span><span class="s2">&quot;-&quot;</span><span class="p">,</span><span class="nx">remove</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">caret</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="o">:</span><span class="s2">&quot;-&quot;</span><span class="o">==</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="p">]</span><span class="o">?</span><span class="p">{</span><span class="nx">remove</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">caret</span><span class="o">:</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span><span class="p">{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">c</span><span class="o">:</span><span class="s2">&quot;-&quot;</span><span class="p">,</span><span class="nx">caret</span><span class="o">:</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">}</span><span class="o">:!</span><span class="mi">1</span><span class="p">},</span><span class="nx">definitions</span><span class="o">:</span><span class="p">{</span><span class="s2">&quot;~&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">negationhandler</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">d</span><span class="o">?</span><span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;[0-9&quot;</span><span class="o">+</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">escapeRegex</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">groupSeparator</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span></div><div class='line' id='LC104'><span class="sr">/[0-9]/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="p">{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">}),</span><span class="o">!</span><span class="mi">1</span><span class="o">!=</span><span class="nx">k</span><span class="o">&amp;&amp;!</span><span class="nx">d</span><span class="p">)){</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">match</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">.</span><span class="nx">integerPart</span><span class="p">(</span><span class="nx">c</span><span class="p">));</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">radixPoint</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">==</span><span class="nx">d</span><span class="p">[</span><span class="s2">&quot;0&quot;</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;0&quot;</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&gt;=</span><span class="nx">c</span><span class="p">.</span><span class="nx">prefix</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">==</span><span class="nx">g</span><span class="o">||</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">index</span><span class="o">?</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">k</span><span class="p">,{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">remove</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">index</span><span class="p">}))</span><span class="o">:</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">index</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">index</span><span class="o">?</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">k</span><span class="p">,{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">remove</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">index</span><span class="p">}));</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;0&quot;</span><span class="o">==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">d</span><span class="p">.</span><span class="nx">index</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">digitsOptional</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">g</span><span class="p">)</span><span class="k">return</span><span class="p">{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span></div><div class='line' id='LC105'><span class="nx">remove</span><span class="o">:</span><span class="nx">e</span><span class="p">}}</span><span class="k">return</span> <span class="nx">k</span><span class="p">},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">prevalidator</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="s2">&quot;+&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="s2">&quot;[&quot;</span><span class="p">;</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">allowMinus</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">+=</span><span class="s2">&quot;-&quot;</span><span class="p">);</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">allowPlus</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">+=</span><span class="s2">&quot;+&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">prevalidator</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="s2">&quot;:&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">negationhandler</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="s2">&quot;[&quot;</span><span class="o">+</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">escapeRegex</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">radixPoint</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">,(</span><span class="nx">d</span><span class="o">=</span><span class="nb">RegExp</span><span class="p">(</span><span class="nx">d</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">validPositions</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">match</span><span class="p">.</span><span class="nx">placeholder</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">radixPoint</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="p">{</span><span class="nx">pos</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">remove</span><span class="o">:</span><span class="nx">e</span><span class="p">}));</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">prevalidator</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span></div><div class='line' id='LC106'><span class="nx">placeholder</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">}},</span><span class="nx">insertMode</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">autoUnmask</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">onUnMask</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">prefix</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">suffix</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nb">RegExp</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">escapeRegex</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">groupSeparator</span><span class="p">),</span><span class="s2">&quot;g&quot;</span><span class="p">),</span><span class="s2">&quot;&quot;</span><span class="p">)},</span><span class="nx">isComplete</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">postFormat</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">!=</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">prefix</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">suffix</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nb">RegExp</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">escapeRegex</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">groupSeparator</span><span class="p">),</span><span class="s2">&quot;g&quot;</span><span class="p">),</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">escapeRegex</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">radixPoint</span><span class="p">),</span></div><div class='line' id='LC107'><span class="s2">&quot;.&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nb">isFinite</span><span class="p">(</span><span class="nx">e</span><span class="p">)},</span><span class="nx">onBeforeMask</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nb">isFinite</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">radixPoint</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/,/g</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/\./g</span><span class="p">);</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\./g</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">radixPoint</span><span class="p">))</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/,/g</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">radixPoint</span><span class="p">))</span><span class="o">:</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nb">RegExp</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">escapeRegex</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">groupSeparator</span><span class="p">),</span><span class="s2">&quot;g&quot;</span><span class="p">),</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">}},</span><span class="nx">decimal</span><span class="o">:</span><span class="p">{</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;numeric&quot;</span><span class="p">},</span><span class="nx">integer</span><span class="o">:</span><span class="p">{</span><span class="nx">alias</span><span class="o">:</span><span class="s2">&quot;numeric&quot;</span><span class="p">,</span><span class="nx">digits</span><span class="o">:</span><span class="s2">&quot;0&quot;</span><span class="p">}})});</span></div><div class='line' id='LC108'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;jquery.inputmask.regex.extensions&quot;</span><span class="p">,[</span><span class="s2">&quot;jquery&quot;</span><span class="p">,</span><span class="s2">&quot;jquery.inputmask&quot;</span><span class="p">],</span><span class="nx">f</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">)})(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">aliases</span><span class="p">,{</span><span class="nx">Regex</span><span class="o">:</span><span class="p">{</span><span class="nx">mask</span><span class="o">:</span><span class="s2">&quot;r&quot;</span><span class="p">,</span><span class="nx">greedy</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">repeat</span><span class="o">:</span><span class="s2">&quot;*&quot;</span><span class="p">,</span><span class="nx">regex</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">regexTokens</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">tokenizer</span><span class="o">:</span><span class="sr">/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g</span><span class="p">,</span><span class="nx">quantifierFilter</span><span class="o">:</span><span class="sr">/[0-9]+[^,]/</span><span class="p">,</span></div><div class='line' id='LC109'><span class="nx">isComplete</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">regex</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">))},</span><span class="nx">definitions</span><span class="o">:</span><span class="p">{</span><span class="nx">r</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">function</span> <span class="nx">k</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matches</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">isGroup</span><span class="o">=</span><span class="nx">a</span><span class="o">||!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">isQuantifier</span><span class="o">=</span><span class="nx">b</span><span class="o">||!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">quantifier</span><span class="o">=</span><span class="p">{</span><span class="nx">min</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">max</span><span class="o">:</span><span class="mi">1</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">repeaterPart</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">k</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">regexTokens</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">tokenizer</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">regex</span><span class="p">);)</span><span class="k">switch</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)){</span><span class="k">case</span> <span class="s2">&quot;(&quot;</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">k</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">));</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;)&quot;</span><span class="o">:</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;{&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;+&quot;</span><span class="o">:</span><span class="k">case</span> <span class="s2">&quot;*&quot;</span><span class="o">:</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span></div><div class='line' id='LC110'><span class="k">new</span> <span class="nx">k</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[{}]/g</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">?</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="nx">d</span><span class="o">=</span><span class="mi">1</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">?</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">:</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="nx">f</span><span class="p">.</span><span class="nx">quantifier</span><span class="o">=</span><span class="p">{</span><span class="nx">min</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">max</span><span class="o">:</span><span class="nx">d</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">matches</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">isGroup</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">k</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="k">else</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">pop</span><span class="p">(),</span><span class="nx">b</span><span class="p">.</span><span class="nx">isGroup</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">k</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)}</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">regexTokens</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span></div><div class='line' id='LC111'><span class="kd">function</span> <span class="nx">y</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">u</span><span class="o">+=</span><span class="s2">&quot;(&quot;</span><span class="p">,</span><span class="nx">L</span><span class="o">++</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">matches</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matches</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">isGroup</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">y</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">==</span><span class="nx">d</span><span class="p">.</span><span class="nx">isQuantifier</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">matches</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matches</span><span class="p">[</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">k</span><span class="o">=</span><span class="nx">u</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">quantifier</span><span class="p">.</span><span class="nx">max</span><span class="p">)){</span><span class="k">for</span><span class="p">(;</span><span class="nx">d</span><span class="p">.</span><span class="nx">repeaterPart</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">repeaterPart</span><span class="o">!=</span><span class="nx">u</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">repeaterPart</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="nx">u</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">y</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)););(</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="nx">y</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">repeaterPart</span><span class="o">=</span><span class="nx">u</span><span class="p">);</span><span class="nx">u</span><span class="o">=</span><span class="nx">k</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">quantifier</span><span class="p">.</span><span class="nx">max</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">quantifier</span><span class="p">.</span><span class="nx">max</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">n</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">y</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">));</span><span class="nx">h</span><span class="o">++</span><span class="p">);</span><span class="nx">u</span><span class="o">=</span><span class="nx">k</span><span class="o">+</span><span class="s2">&quot;{&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">quantifier</span><span class="p">.</span><span class="nx">min</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">quantifier</span><span class="p">.</span><span class="nx">max</span><span class="o">+</span><span class="s2">&quot;}&quot;</span><span class="p">}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!=</span><span class="nx">d</span><span class="p">.</span><span class="nx">matches</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span></div><div class='line' id='LC112'><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">y</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">b</span><span class="p">));</span><span class="nx">g</span><span class="o">++</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;[&quot;</span><span class="o">==</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]){</span><span class="nx">c</span><span class="o">=</span><span class="nx">u</span><span class="p">;</span><span class="nx">c</span><span class="o">+=</span><span class="nx">d</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">L</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">+=</span><span class="s2">&quot;)&quot;</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;^(&quot;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s2">&quot;)$&quot;</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">M</span><span class="p">)}</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">k</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;\\&quot;</span><span class="o">!=</span><span class="nx">d</span><span class="p">[</span><span class="nx">g</span><span class="p">]){</span><span class="nx">c</span><span class="o">=</span><span class="nx">u</span><span class="p">;</span><span class="nx">c</span><span class="o">+=</span><span class="nx">d</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\|$/</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">L</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">+=</span><span class="s2">&quot;)&quot;</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;^(&quot;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s2">&quot;)$&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">M</span><span class="p">))</span><span class="k">break</span><span class="p">}</span><span class="nx">u</span><span class="o">+=</span><span class="nx">d</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="k">break</span><span class="p">}</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">u</span><span class="o">+=</span><span class="s2">&quot;)&quot;</span><span class="p">,</span><span class="nx">L</span><span class="o">--</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">}</span><span class="kc">null</span><span class="o">==</span><span class="nx">c</span><span class="p">.</span><span class="nx">regexTokens</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">();</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">slice</span><span class="p">();</span><span class="kd">var</span> <span class="nx">u</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="nx">b</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">L</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="kd">var</span> <span class="nx">M</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">regexTokens</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">regexTokens</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">b</span><span class="o">=</span><span class="nx">y</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">isGroup</span><span class="p">));</span><span class="nx">a</span><span class="o">++</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span></div><div class='line' id='LC113'><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">}}}})});</span></div><div class='line' id='LC114'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="s2">&quot;function&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">define</span><span class="o">&amp;&amp;</span><span class="nx">define</span><span class="p">.</span><span class="nx">amd</span><span class="o">?</span><span class="nx">define</span><span class="p">(</span><span class="s2">&quot;jquery.inputmask.phone.extensions&quot;</span><span class="p">,[</span><span class="s2">&quot;jquery&quot;</span><span class="p">,</span><span class="s2">&quot;jquery.inputmask&quot;</span><span class="p">],</span><span class="nx">f</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">)})(</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">inputmask</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">aliases</span><span class="p">,{</span><span class="nx">phone</span><span class="o">:</span><span class="p">{</span><span class="nx">url</span><span class="o">:</span><span class="s2">&quot;phone-codes/phone-codes.json&quot;</span><span class="p">,</span><span class="nx">mask</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">definitions</span><span class="o">=</span><span class="p">{</span><span class="nx">p</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="s2">&quot;#&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[0-9]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">}};</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[];</span><span class="nx">f</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span><span class="nx">url</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span><span class="nx">async</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">dataType</span><span class="o">:</span><span class="s2">&quot;json&quot;</span><span class="p">,</span><span class="nx">success</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">}});</span><span class="nx">b</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;+p(ppp)ppp-pppp&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">nojumps</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">nojumpsThreshold</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span></div><div class='line' id='LC115'><span class="nx">phonebe</span><span class="o">:</span><span class="p">{</span><span class="nx">url</span><span class="o">:</span><span class="s2">&quot;phone-codes/phone-be.json&quot;</span><span class="p">,</span><span class="nx">mask</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">definitions</span><span class="o">=</span><span class="p">{</span><span class="nx">p</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">},</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="s2">&quot;#&quot;</span><span class="o">:</span><span class="p">{</span><span class="nx">validator</span><span class="o">:</span><span class="s2">&quot;[0-9]&quot;</span><span class="p">,</span><span class="nx">cardinality</span><span class="o">:</span><span class="mi">1</span><span class="p">}};</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[];</span><span class="nx">f</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span><span class="nx">url</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span><span class="nx">async</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">dataType</span><span class="o">:</span><span class="s2">&quot;json&quot;</span><span class="p">,</span><span class="nx">success</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">}});</span><span class="nx">b</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;+32(ppp)ppp-pppp&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">nojumps</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">nojumpsThreshold</span><span class="o">:</span><span class="mi">4</span><span class="p">}})});</span></div></pre></div></td>
         </tr>
       </table>
  </div>

  </div>
</div>

<a href="#jump-to-line" rel="facebox[.linejump]" data-hotkey="l" style="display:none">Jump to Line</a>
<div id="jump-to-line" style="display:none">
  <form accept-charset="UTF-8" class="js-jump-to-line-form">
    <input class="linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" autofocus>
    <button type="submit" class="button">Go</button>
  </form>
</div>

        </div>

      </div><!-- /.repo-container -->
      <div class="modal-backdrop"></div>
    </div><!-- /.container -->
  </div><!-- /.site -->


    </div><!-- /.wrapper -->

      <div class="container">
  <div class="site-footer">
    <ul class="site-footer-links right">
      <li><a href="https://status.github.com/">Status</a></li>
      <li><a href="http://developer.github.com">API</a></li>
      <li><a href="http://training.github.com">Training</a></li>
      <li><a href="http://shop.github.com">Shop</a></li>
      <li><a href="/blog">Blog</a></li>
      <li><a href="/about">About</a></li>

    </ul>

    <a href="/" aria-label="Homepage">
      <span class="mega-octicon octicon-mark-github" title="GitHub"></span>
    </a>

    <ul class="site-footer-links">
      <li>&copy; 2014 <span title="0.08010s from github-fe119-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="/site/terms">Terms</a></li>
        <li><a href="/site/privacy">Privacy</a></li>
        <li><a href="/security">Security</a></li>
        <li><a href="/contact">Contact</a></li>
    </ul>
  </div><!-- /.site-footer -->
</div><!-- /.container -->


    <div class="fullscreen-overlay js-fullscreen-overlay" id="fullscreen_overlay">
  <div class="fullscreen-container js-suggester-container">
    <div class="textarea-wrap">
      <textarea name="fullscreen-contents" id="fullscreen-contents" class="fullscreen-contents js-fullscreen-contents js-suggester-field" placeholder=""></textarea>
    </div>
  </div>
  <div class="fullscreen-sidebar">
    <a href="#" class="exit-fullscreen js-exit-fullscreen tooltipped tooltipped-w" aria-label="Exit Zen Mode">
      <span class="mega-octicon octicon-screen-normal"></span>
    </a>
    <a href="#" class="theme-switcher js-theme-switcher tooltipped tooltipped-w"
      aria-label="Switch themes">
      <span class="octicon octicon-color-mode"></span>
    </a>
  </div>
</div>



    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <a href="#" class="octicon octicon-x close js-ajax-error-dismiss" aria-label="Dismiss error"></a>
      Something went wrong with that request. Please try again.
    </div>


      <script crossorigin="anonymous" src="https://assets-cdn.github.com/assets/frameworks-12d5fda141e78e513749dddbc56445fe172cbd9a.js" type="text/javascript"></script>
      <script async="async" crossorigin="anonymous" src="https://assets-cdn.github.com/assets/github-d6c1b1bf57282d37212d63f58b44e4059b37fba5.js" type="text/javascript"></script>
      
      
        <script async src="https://www.google-analytics.com/analytics.js"></script>
  </body>
</html>

